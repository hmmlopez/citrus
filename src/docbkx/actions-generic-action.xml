<?xml version="1.0" encoding="UTF-8"?>
<section id="actions-generic-action">
    <title>Including custom test actions</title>

    <para>Now we have a look at the opportunity to add custom test actions to the test case flow. Let us start this section with an example:</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;testcase name=&quot;ActionReferenceTest&quot;&gt;
    &lt;actions&gt;
        &lt;action reference=&quot;cleanUpDatabase&quot;/&gt;
        &lt;action reference=&quot;mySpecialAction&quot;/&gt;
    &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>

    <para>The generic &lt;action&gt; element references Spring beans that implement the Java interface 
    <literal>com.consol.citrus.TestAction</literal>. This is a very fast way to add your own action 
    implementations to a Citrus test case. This way you can easily implement your own actions in Java and 
    include them into the test case.</para>
    
    <para>In the example above the called actions are special database cleanup implementations. The actions are defined as Spring beans 
    in the Citrus configuration and get referenced by their bean name or id.</para>
    
    <programlisting>&lt;bean id=&quot;cleanUpDatabase&quot; class=&quot;my.domain.citrus.actions.SpecialDatabaseCleanupAction&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;testDataSource&quot;/&gt;
&lt;/bean&gt;</programlisting>

    <para>The Spring application context holds your custom bean implementations. You can set properties and use the full Spring power while implementing your
    custom test action in Java. Let us have a look on how such a Java class may look like.</para>

    <programlisting language="java">import com.consol.citrus.actions.AbstractTestAction;
import com.consol.citrus.context.TestContext;

public class SpecialDatabaseCleanupAction extends AbstractTestAction {

    @Autowired
    private DataSource dataSource;
    
    @Override
    public void doExecute(TestContext context) {
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
        
        jdbcTemplate.execute("...");
    }

}</programlisting>

    <para>All you need to do in your Java class is to implement the Citrus <literal>com.consol.citrus.TestAction</literal> interface. The abstract class 
    <literal>com.consol.citrus.actions.AbstractTestAction</literal> may help you to start with your custom test action implementation as it provides basic
    method implementations so you just have to implement the <literal>doExecute()</literal> method.</para>
    
    <para>When using the Java test case DSL you are also quite comfortable with including your custom test actions.</para>

    <para><emphasis>Java DSL designer and runner</emphasis></para>
    <programlisting language="java">@Autowired
private SpecialDatabaseCleanupAction cleanUpDatabaseAction;

@CitrusTest
public void genericActionTest() {
    echo("Now let's include our special test action");
    
    action(cleanUpDatabaseAction);
    
    echo("That's it!");
}</programlisting>

    <para>Using anonymous class implementations is also possible.</para>

    <para><emphasis>Java DSL designer and runner</emphasis></para>
    <programlisting language="java">@CitrusTest
public void genericActionTest() {
    echo("Now let's call our special test action anonymously");
    
    action(new AbstractTestAction() {
        public void doExecute(TestContext context) {
            // do something
        }
    });
    
    echo("That's it!");
}</programlisting>
</section>