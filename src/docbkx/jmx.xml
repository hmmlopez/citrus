<?xml version="1.0" encoding="UTF-8"?>
<chapter id="jmx">
  <title>JMX support</title>

  <para>JMX is a standard Java API for making beans accessible to others in terms of management and remote configuration. JMX is the short term for Java Management Extensions
  and is often used in JEE application servers to manage bean attributes and operations from outside (e.g. another JVM). A managed bean server hosts multiple managed beans for JMX access.
  Remote connections to JMX can be realized with RMI (Remote method invocation) capabilities.</para>

  <para>Citrus is able to connect to JMX managed beans as client and server. As a client Citrus can invoke managed bean operations and read write managed bean attributes. As a server
  Citrus is able to expose managed beans as mbean server. Clients can access those Citrus managed beans and get proper response objects as result. Doing so you can use the JVM platform
  managed bean server or some RMI registry for providing remote access.</para>

  <note>
    <para>The JMX components in Citrus are kept in a separate Maven module. So you should check that the module
      is available as Maven dependency in your project</para>

    <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.consol.citrus&lt;/groupId&gt;
  &lt;artifactId&gt;citrus-jmx&lt;/artifactId&gt;
  &lt;version&gt;2.7-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</programlisting>

    <para>As usual Citrus provides a customized jmx configuration schema that
      is used in Spring configuration files. Simply include the citrus-jmx namespace in the configuration XML files as follows.</para>

    <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
      xmlns:citrus=&quot;http://www.citrusframework.org/schema/config&quot;
      xmlns:citrus-jmx=&quot;http://www.citrusframework.org/schema/jmx/config&quot;
      xsi:schemaLocation=&quot;
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.citrusframework.org/schema/config
      http://www.citrusframework.org/schema/config/citrus-config.xsd
      http://www.citrusframework.org/schema/jmx/config
      http://www.citrusframework.org/schema/jmx/config/citrus-jmx-config.xsd&quot;&gt;

      [...]

      &lt;/beans&gt;</programlisting>

    <para>Now you are ready to use the customized Http configuration elements with the
      citrus-jmx namespace prefix.</para>
  </note>

  <para>Next sections describe the JMX message support in Citrus in more detail.</para>

  <section id="jmx-client">
    <title>JMX client</title>

    <para>On the client side we want to call some managed bean by either accessing managed attributes with read/write or by invoking a managed bean operation.
    For proper mbean server connectivity we should specify a client component for JMX that sends out mbean invocation calls.</para>

    <programlisting>&lt;citrus-jmx:client id=&quot;jmxClient&quot;
      server-url=&quot;platform&quot;/&gt;</programlisting>

    <para>The client component specifies the target managed bean server that we want to connect to. In this example we are using the JVM platform mbean server.
    This means we are able to access all JVM managed beans such as Memory, Threading and Logging. In addition to that we can access all custom managed beans that were
    exposed to the platform mbean server.</para>

    <para>In most cases you may want to access managed beans on a different JVM or application server. So we need some remote connection to the foreign mbean server.</para>

    <programlisting>&lt;citrus-jmx:client id=&quot;jmxClient&quot;
      server-url=&quot;service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi&quot;
      username=&quot;user&quot;
      password=&quot;s!cr!t&quot;
      auto-reconnect=&quot;true&quot;
      delay-on-reconnect=&quot;5000&quot;/&gt;</programlisting>

    <para>In this example above we connect to a remote mbean server via RMI using the default RMI registry <emphasis>localhost:1099</emphasis> and the service name <emphasis>jmxrmi</emphasis>.
    Citrus is able to handle different remote transport protocols. Just define those in the <emphasis>server-url</emphasis>.</para>

    <para>Now that we have setup the client component we can use it in a test case to access a managed bean.</para>

    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;send endpoint=&quot;jmxClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mbean-invocation xmlns=&quot;http://www.citrusframework.org/schema/jmx/message&quot;&gt;
              &lt;mbean&gt;java.lang:type=Memory&lt;/mbean&gt;
              &lt;attribute name=&quot;Verbose&quot;/&gt;
            &lt;/mbean-invocation&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@CitrusTest
public void jmxClientTest() {
    send(jmxClient)
        .message(JmxMessage.invocation("java.lang:type=Memory")
            .attribute("Verbose"));
}</programlisting>

    <para>As you can see we just used a normal send action referencing the jmx client component that we have just added. The message payload is a XML representation of the managed bean access. This
    is a special Citrus XML representation. Citrus will convert this XML payload to the actuel managed bean access. In the example above we try to access a managed bean with object name <emphasis>java.lang:type=Memory</emphasis>.
    The object name is defined in JMX specification and consists of a key <emphasis>java.lang:type</emphasis> and a value <emphasis>Memory</emphasis>. So we identify the managed bean on the server by its type.</para>

    <para>Now that we have access to the managed bean we can read its managed attributes such as <emphasis>Verbose</emphasis>. This is a boolean type attribute so the mbean invocation result will be a respective Boolean object. We
    can validate the managed bean attribute access in a receive action.</para>

    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;receive endpoint=&quot;jmxClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mbean-result xmlns=&quot;http://www.citrusframework.org/schema/jmx/message&quot;&gt;
              &lt;object type=&quot;java.lang.Boolean&quot; value=&quot;false&quot;/&gt;
            &lt;/mbean-result&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>

    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@CitrusTest
public void jmxClientTest() {
    receive(jmxClient)
        .message(JmxMessage.result(false));
}</programlisting>

    <para>In the sample above we receive the mbean result and expect a <emphasis>java.lang.Boolean</emphasis> object return value.
    The return value content is also validated within the mbean result payload.</para>

    <para>Some managed bean attributes might also be settable for us. So wen can define the attribute access as write operation by specifying a value in the send action payload.</para>

    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;send endpoint=&quot;jmxClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mbean-invocation xmlns=&quot;http://www.citrusframework.org/schema/jmx/message&quot;&gt;
              &lt;mbean&gt;java.lang:type=Memory&lt;/mbean&gt;
              &lt;attribute name=&quot;Verbose&quot; value=&quot;true&quot; type=&quot;java.lang.Boolean&quot;/&gt;
            &lt;/mbean-invocation&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@CitrusTest
public void jmxClientTest() {
    send(jmxClient)
        .message(JmxMessage.invocation("java.lang:type=Memory")
            .attribute("Verbose", true));
}</programlisting>

    <para>Now we have write access to the managed attribute <emphasis>Verbose</emphasis>. We do specify the value and its type <emphasis>java.lang.Boolean</emphasis>. This is how we can set attribute values on managed beans.</para>

    <para>Last not least we are able to access managed bean operations.</para>

    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;send endpoint=&quot;jmxClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mbean-invocation xmlns=&quot;http://www.citrusframework.org/schema/jmx/message&quot;&gt;
              &lt;mbean&gt;com.consol.citrus.jmx.mbean:type=HelloBean&lt;/mbean&gt;
              &lt;operation name=&quot;sayHello&quot;&gt;
                &gt;parameter&gt;
                  &gt;param type="java.lang.String" value="Hello JMX!"/&gt;
                &gt;/parameter&gt;
              &gt;/operation&gt;
            &lt;/mbean-invocation&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@CitrusTest
public void jmxClientTest() {
    send(jmxClient)
        .message(JmxMessage.invocation("com.consol.citrus.jmx.mbean:type=HelloBean")
            .operation("sayHello")
            .parameter("Hello JMX!"));
}</programlisting>

    <para>In the example above we access a custom managed bean and invoke its operation <emphasis>sayHello</emphasis>. We are also using operation parameters for the invocation. This should call the managed bean operation and return its result if any as usual.</para>

    <para>This completes the basic JMX managed bean access as client. Now we also want to discuss the server side were Citrus is able to provide managed beans for others</para>
  </section>

  <section id="jmx-server">
    <title>JMX server</title>

    <para>The server side is always a little bit more tricky because we need to simulate custom managed bean access as a server. First of all Citrus provides a server component that specifies the connection properties for clients such as transport protocols,
    ports and mbean object names. Lets create a new server that accepts incoming requests via RMI on a remote registry <emphasis>localhost:1099</emphasis>.</para>

    <programlisting>&lt;citrus-jmx:server id=&quot;jmxServer&quot;
      server-url=&quot;service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi&quot;
    &lt;citrus-jmx:mbeans&gt;
        &lt;citrus-jmx:mbean type=&quot;com.consol.citrus.jmx.mbean.HelloBean&quot;/&gt;
        &lt;citrus-jmx:mbean type=&quot;com.consol.citrus.jmx.mbean.NewsBean&quot; objectDomain=&quot;com.consol.citrus.news&quot; objectName=&quot;name=News&quot;/&gt;
    &lt;/citrus-jmx:mbeans&gt;
&lt;/citrus-jmx:server&gt;</programlisting>

    <para>As usual we define a <emphasis>server-url</emphasis> that controls the JMX connector access to the mbean server. In this example above we open a JMX RMI connector for clients using the registry <emphasis>localhost:1099</emphasis> and the service name <emphasis>jmxrmi</emphasis>
    By default Citrus will not attempt to create this registry automatically so the registry has to be present before the server start up. With the optional server property <emphasis>create-registry</emphasis> set to <emphasis>true</emphasis> you can auto create the registry when the server starts up.
    These properties do only apply when using a remote JMX connector server.</para>

    <para>Besides using the whole server-url as property we can also construct the connection by host, port, protocol and binding properties.</para>

    <programlisting>&lt;citrus-jmx:server id=&quot;jmxServer&quot;
      host=&quot;localhost&quot;
      port=&quot;1099&quot;
      protocol=&quot;rmi&quot;
      binding=&quot;jmxrmi&quot;
    &lt;citrus-jmx:mbeans&gt;
        &lt;citrus-jmx:mbean type=&quot;com.consol.citrus.jmx.mbean.HelloBean&quot;/&gt;
        &lt;citrus-jmx:mbean type=&quot;com.consol.citrus.jmx.mbean.NewsBean&quot; objectDomain=&quot;com.consol.citrus.news&quot; objectName=&quot;name=News&quot;/&gt;
    &lt;/citrus-jmx:mbeans&gt;
&lt;/citrus-jmx:server&gt;</programlisting>

    <para>On last thing to mention is that we could have also used <emphasis>platform</emphasis> as server-url in order to use the JVM platform mbean server instead.</para>

    <para>Now that we clarified the connectivity we need to talk about how to define the managed beans that are available on our JMX mbean server. This is done as nested <emphasis>mbean</emphasis> configuration elements. Here the managed bean definitions describe the managed bean with its
    objectDomain, objectName, operations and attributes. The most convenient way of defining such managed bean definitions is to give a bean type which is the fully qualified class name of the managed bean. Citrus will use the package name and class name for proper objectDomain and objectName
    construction.</para>

    <para>Lets have a closer look at the irst mbean definition in the example above. So the first managed bean is defined by its class name <emphasis>com.consol.citrus.jmx.mbean.HelloBean</emphasis> and therefore is accessible using the objectName
    <emphasis>com.consol.citrus.jmx.mbean:type=HelloBean</emphasis>. In addition to that Citrus will read the class information such as available methods, getters and setters for constructing a proper MBeanInfo. In the second managed bean definition in our example we have used additional
    custom objectDomain and objectName values. So the <emphasis>NewsBean</emphasis> will be accessible with <emphasis>com.consol.citrus.news:name=News</emphasis> on the managed bean server.</para>

    <para>This is how we can define the bindings of managed beans and what clients need to search for when finding and accessing the managed beans on the server. When clients try to find the managed beans they have to use proper objectNames accordingly. ObjectNames that are not defined on the server
    will be rejected with managed bean not found error.</para>

    <para>Right now we have to use the qualified class name of the managed bean in the definition. What happens if we do not have access to that mbean class or if there is not managed bean interface available at all? Citrus provides a generic managed bean that is able to handle
    any managed bean interaction. The generic bean implementation needs to know the managed operations and attributes though. So lets define a new generic managed bean on our server:</para>

    <programlisting>&lt;citrus-jmx:server id=&quot;jmxServer&quot;
server-url=&quot;service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi&quot;
    &lt;citrus-jmx:mbeans&gt;
        &lt;citrus-jmx:mbean name=&quot;fooBean&quot; objectDomain=&quot;foo.object.domain&quot; objectName=&quot;type=FooBean&quot;&gt;
            &lt;citrus-jmx:operations&gt;
                &lt;citrus-jmx:operation name=&quot;fooOperation&quot;&gt;
                    &lt;citrus-jmx:parameter&gt;
                        &lt;citrus-jmx:param type=&quot;java.lang.String&quot;/&gt;
                        &lt;citrus-jmx:param type=&quot;java.lang.Integer&quot;/&gt;
                    &lt;/citrus-jmx:parameter&gt;
                &lt;/citrus-jmx:operation&gt;
                &lt;citrus-jmx:operation name=&quot;barOperation&quot;/&gt;
            &lt;/citrus-jmx:operations&gt;
            &lt;citrus-jmx:attributes&gt;
                &lt;citrus-jmx:attribute name=&quot;fooAttribute&quot; type=&quot;java.lang.String&quot;/&gt;
                &lt;citrus-jmx:attribute name=&quot;barAttribute&quot; type=&quot;java.lang.Boolean&quot;/&gt;
            &lt;/citrus-jmx:attributes&gt;
        &lt;/citrus-jmx:mbean&gt;
    &lt;/citrus-jmx:mbeans&gt;
&lt;/citrus-jmx:server&gt;</programlisting>

    <para>The generic bean definition needs to define all operations and attributes that are available for access. Up to now we are restricted to using Java base types when defining operation parameter and attribute return types. There is actually no way to define more complex return types.
    Nevertheless Citrus is now able to expose the managed bean for client access without having to know the actual managed bean implementation.</para>

    <para>Now we can use the server component in a test case to receive some incoming managed bean access.</para>

    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;receive endpoint=&quot;jmxServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mbean-invocation xmlns=&quot;http://www.citrusframework.org/schema/jmx/message&quot;&gt;
              &lt;mbean&gt;com.consol.citrus.jmx.mbean:type=HelloBean&lt;/mbean&gt;
              &lt;operation name=&quot;sayHello&quot;&gt;
                &gt;parameter&gt;
                  &gt;param type="java.lang.String" value="Hello JMX!"/&gt;
                &gt;/parameter&gt;
              &lt;/operation&gt;
            &lt;/mbean-invocation&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>

    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@CitrusTest
public void jmxServerTest() {
    receive(jmxServer)
        .message(JmxMessage.invocation("com.consol.citrus.jmx.mbean:type=HelloBean")
            .operation("sayHello")
            .parameter("Hello JMX!"));
}</programlisting>

    <para>In this very first example we expect a managed bean access to the bean <emphasis>com.consol.citrus.jmx.mbean:type=HelloBean</emphasis>. We further expect the operation <emphasis>sayHello</emphasis> to be called with respective parameter values. Now we have to define the
    operation result that will be returned to the calling client as operation result.</para>

    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;send endpoint=&quot;jmxServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
          &lt;mbean-result xmlns=&quot;http://www.citrusframework.org/schema/jmx/message&quot;&gt;
            &lt;object type=&quot;java.lang.String&quot; value=&quot;Hello from JMX!&quot;/&gt;
          &lt;/mbean-result&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@CitrusTest
public void jmxServerTest() {
    send(jmxServer)
        .message(JmxMessage.result("Hello from JMX!"));
}</programlisting>

    <para>The operation returns a String <emphasis>Hello from JMX!</emphasis>. This is how we can expect operation calls on managed beans. Now we already have seen that managed beans also expose attributes. The next example is handling incoming attribute read access.</para>

    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;receive endpoint=&quot;jmxServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mbean-invocation xmlns=&quot;http://www.citrusframework.org/schema/jmx/message&quot;&gt;
              &lt;mbean&gt;com.consol.citrus.news:name=News&lt;/mbean&gt;
                &gt;attribute name="newsCount"/&gt;
            &lt;/mbean-invocation&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/receive&gt;

&lt;send endpoint=&quot;jmxServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
          &lt;mbean-result xmlns=&quot;http://www.citrusframework.org/schema/jmx/message&quot;&gt;
            &lt;object type=&quot;java.lang.Integer&quot; value=&quot;100&quot;/&gt;
          &lt;/mbean-result&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@CitrusTest
public void jmxServerTest() {
    receive(jmxServer)
        .message(JmxMessage.invocation("com.consol.citrus.news:name=News")
            .attribute("newsCount");

    send(jmxServer)
        .message(JmxMessage.result(100));
}</programlisting>

    <para>The receive action expects read access to the <emphasis>NewsBean</emphasis> attribute <emphasis>newsCount</emphasis> and returns a result object of type <emphasis>java.lang.Integer</emphasis>. This way we can expect all attribute access to our managed beans. Write operations
    will have a attribute value specified.</para>

    <para>This completes the JMX server capabilities with managed bean access on operations and attributes.</para>
  </section>

</chapter>
