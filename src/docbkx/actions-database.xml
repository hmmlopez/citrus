<?xml version="1.0" encoding="UTF-8"?>
<section id="actions-database">
    <title>Database actions</title>
  
    <para>In many cases it is necessary to access the database during a test. This enables a tester to also validate 
    the persistent data in a database. It might also be helpful to prepare the database with some test data before running a test. 
    You can do this using the two database actions that are described in the following sections.</para>
    
    <section id="actions-database-update">
      <title>SQL update, insert, delete</title>
  
      <para>The &lt;sql&gt; action simply executes a group of SQL statements in order to change data in a database.
      Typically the action is used to prepare the database at the beginning of a test or to clean up the
      database at the end of a test. You can specify SQL statements like INSERT, UPDATE,
      DELETE, CREATE TABLE, ALTER TABLE and many more.</para>
      
      <para>On the one hand you can specify the statements as inline SQL or stored in an external
      SQL resource file as shown in the next two examples.</para>
      
      <para><emphasis>XML DSL</emphasis></para>
      <programlisting>&lt;actions&gt;
    &lt;sql datasource=&quot;someDataSource&quot;&gt;
        &lt;statement&gt;DELETE FROM CUSTOMERS&lt;/statement&gt;
        &lt;statement&gt;DELETE FROM ORDERS&lt;/statement&gt;
    &lt;/sql&gt;
    
    &lt;sql datasource=&quot;myDataSource&quot;&gt;
        &lt;resource file=&quot;file:tests/unit/resources/script.sql&quot;/&gt;
    &lt;/sql&gt;
&lt;/actions&gt;</programlisting>

      <para><emphasis>Java DSL designer</emphasis></para>
      <programlisting language="java">@Autowired
@Qualifier("myDataSource")
private DataSource dataSource;

@CitrusTest
public void sqlTest() {
    sql(dataSource)
        .statement("DELETE FROM CUSTOMERS")
        .statement("DELETE FROM ORDERS");
            
    sql(dataSource)
        .sqlResource("file:tests/unit/resources/script.sql");
}</programlisting>

      <para><emphasis>Java DSL runner</emphasis></para>
      <programlisting language="java">@Autowired
@Qualifier("myDataSource")
private DataSource dataSource;

@CitrusTest
public void sqlTest() {
    sql(action -> action.dataSource(dataSource)
        .statement("DELETE FROM CUSTOMERS")
        .statement("DELETE FROM ORDERS"));

    sql(action -> action.dataSource(dataSource)
        .sqlResource("file:tests/unit/resources/script.sql"));
}</programlisting>
      
      <para>The first action uses inline SQL statements defined directly inside the test case. The next action uses an external 
      SQL resource file instead. The file resource can hold several SQL statements separated by new lines. All statements inside 
      the file are executed sequentially by the framework.</para>
      
      <important>
        <para>You have to pay attention to some rules when dealing with external SQL resources.</para>
        <itemizedlist mark="opencircle">
          <listitem>
              <para>Each statement should begin in a new line</para>
          </listitem>
          <listitem>
              <para>It is not allowed to define statements with word wrapping</para>
          </listitem>
          <listitem>
              <para>Comments begin with two dashes &quot;--&quot;</para>
          </listitem>
        </itemizedlist>
      </important>
      
      <note>
        <para>The external file is referenced either as file system resource or class path resource,
        by using the &quot;file:&quot; or &quot;classpath:&quot; prefix.</para>
      </note>
      
      <para>Both examples use the &quot;datasource&quot; attribute. This value defines the database data source to be used. The connection to
      a data source is mandatory, because the test case does not know about user credentials or database names. The 'datasource' attribute 
      references predefined data sources that are located in a separate Spring configuration file.</para>
    </section>
    
    <section id="actions-database-query">
      <title>SQL query</title>
      
      <para>The &lt;sql&gt; query action is specially designed to execute SQL queries (SELECT * FROM). So the test is able to read data from a database. 
      The query results are validated against expected data as shown in the next example.</para>
      
      <para><emphasis>XML DSL</emphasis></para>
      <programlisting>&lt;sql datasource=&quot;testDataSource&quot;&gt;
    &lt;statement&gt;select NAME from CUSTOMERS where ID='${customerId}'&lt;/statement&gt;
    &lt;statement&gt;select count(*) from ERRORS&lt;/statement&gt;
    &lt;statement&gt;select ID from ORDERS where DESC LIKE 'Def%'&lt;/statement&gt;
    &lt;statement&gt;select DESCRIPTION from ORDERS where ID='${id}'&lt;/statement&gt;
    
    &lt;validate column=&quot;ID&quot; value=&quot;1&quot;/&gt;
    &lt;validate column=&quot;NAME&quot; value=&quot;Christoph&quot;/&gt;
    &lt;validate column=&quot;COUNT(*)&quot; value=&quot;${rowsCount}&quot;/&gt;
    &lt;validate column=&quot;DESCRIPTION&quot; value=&quot;null&quot;/&gt;
&lt;/sql&gt;</programlisting>

      <para><emphasis>Java DSL designer</emphasis></para>
      <programlisting language="java">@Autowired
@Qualifier("testDataSource")
private DataSource dataSource;

@CitrusTest
public void databaseQueryTest() {
    query(dataSource)
          .statement("select NAME from CUSTOMERS where CUSTOMER_ID='${customerId}'")
          .statement("select COUNT(1) as overall_cnt from ERRORS")
          .statement("select ORDER_ID from ORDERS where DESCRIPTION LIKE 'Migrate%'")
          .statement("select DESCRIPTION from ORDERS where ORDER_ID = 2")
          .validate("ORDER_ID", "1")
          .validate("NAME", "Christoph")
          .validate("OVERALL_CNT", "${rowsCount}")
          .validate("DESCRIPTION", "NULL");
}</programlisting>

      <para><emphasis>Java DSL runner</emphasis></para>
      <programlisting language="java">@Autowired
@Qualifier("testDataSource")
private DataSource dataSource;

@CitrusTest
public void databaseQueryTest() {
    query(action -> action.dataSource(dataSource)
            .statement("select NAME from CUSTOMERS where CUSTOMER_ID='${customerId}'")
            .statement("select COUNT(1) as overall_cnt from ERRORS")
            .statement("select ORDER_ID from ORDERS where DESCRIPTION LIKE 'Migrate%'")
            .statement("select DESCRIPTION from ORDERS where ORDER_ID = 2")
            .validate("ORDER_ID", "1")
            .validate("NAME", "Christoph")
            .validate("OVERALL_CNT", "${rowsCount}")
            .validate("DESCRIPTION", "NULL"));
}</programlisting>
      
      <para>The action offers a wide range of validating functionality for database result sets. First
      of all you have to select the data via SQL statements. Here again you have the choice to use inline SQL
      statements or external file resource pattern.</para>
      
      <para>The result sets are validated through &lt;validate&gt; elements. It is possible to do a detailed check on
      every selected column of the result set. Simply refer to the selected column name in order to validate its
      value. The usage of test variables is supported as well as database expressions like count(), avg(), min(),
      max().</para>
      
      <para>You simply define the &lt;validate&gt; entry with the column name as the &quot;column&quot; attribute and any expected
      value expression as expected &quot;value&quot;. The framework then will check the column to fit the expected value and raise 
      validation errors in case of mismatch.</para>
      
      <para>Looking at the first SELECT statement in the example you will see that test variables are supported in the 
      SQL statements. The framework will replace the variable with its respective value before sending it to the database.</para>
      
      <para>In the validation section variables can be used too. Look at the third validation entry, where the variable
      &quot;${rowsCount}&quot; is used. The last validation in this example shows, that <literal>NULL</literal> values are 
      also supported as expected values.</para>
      
      <para>If a single validation happens to fail, the whole action will fail with respective validation errors.</para>
      
      <important>
        <para>The validation with <literal>&quot;&lt;validate column=&quot;...&quot; value=&quot;...&quot;/&gt;&quot;</literal> 
        meets single row result sets as you specify a single column control value. In case you have multiple rows in a result 
        set you rather need to validate the columns with multiple control values like this:</para>

        <programlisting>
  &lt;validate column=&quot;someColumnName&quot;&gt;
      &lt;values&gt;
          &lt;value&gt;Value in 1st row&lt;/value&gt;
          &lt;value&gt;Value in 2nd row&lt;/value&gt;
          &lt;value&gt;Value in 3rd row&lt;/value&gt;
          &lt;value&gt;Value in x row&lt;/value&gt;
      &lt;/values&gt;               
  &lt;/validate&gt;
        </programlisting>
        
        <para>Within Java you can pass a variable argument list to the validate method like this:</para>
        
        <programlisting language="java">query(dataSource)
    .statement("select NAME from WEEKDAYS where NAME LIKE 'S%'")
    .validate("NAME", "Saturday", "Sunday")</programlisting>
      </important>
      
      <para>Next example shows how to work with multiple row result sets and multiple values to expect within one column:</para>
      
      <programlisting>
  &lt;sql datasource=&quot;testDataSource&quot;&gt;
      &lt;statement&gt;select WEEKDAY as DAY, DESCRIPTION from WEEK&lt;/statement&gt;
      &lt;validate column=&quot;DAY&quot;&gt;
          &lt;values&gt;
              &lt;value&gt;Monday&lt;/value&gt;
              &lt;value&gt;Tuesday&lt;/value&gt;
              &lt;value&gt;Wednesday&lt;/value&gt;
              &lt;value&gt;Thursday&lt;/value&gt;
              &lt;value&gt;Friday&lt;/value&gt;
              &lt;value&gt;@ignore@&lt;/value&gt;
              &lt;value&gt;@ignore@&lt;/value&gt;
          &lt;/values&gt;            	
      &lt;/validate&gt;
      &lt;validate column=&quot;DESCRIPTION&quot;&gt;
          &lt;values&gt;
              &lt;value&gt;I hate Mondays!&lt;/value&gt;
              &lt;value&gt;Tuesday is sports day&lt;/value&gt;
              &lt;value&gt;The mid of the week&lt;/value&gt;
              &lt;value&gt;Thursday we play chess&lt;/value&gt;
              &lt;value&gt;Friday, the weekend is near!&lt;/value&gt;
              &lt;value&gt;@ignore@&lt;/value&gt;
              &lt;value&gt;@ignore@&lt;/value&gt;
          &lt;/values&gt;            	
      &lt;/validate&gt;
  &lt;/sql&gt;
      </programlisting>
      
      <para>For the validation of multiple rows the <literal>&lt;validate&gt;</literal> element is able to host a list of control values for a column. 
      As you can see from the example above, you have to add a control value for each row in the result set. This also means that we have to take care 
      of the total number of rows. Fortunately we can use the ignore placeholder, in order to skip the validation of a specific row in the result set. 
      Functions and variables are supported as usual.</para>
      
      <important>
        <para>It is important, that the control values are defined in the correct order, because they are compared one on one with the actual 
        result set coming from database query. You may need to add "order by" SQL expressions to get the right order of rows returned. If any of the values 
        fails in validation or the total number of rows is not equal, the whole action will fail with respective validation errors.</para>
      </important>
    </section>
    
    <section id="actions-database-groovy">
      <title>Groovy SQL result set validation</title>
        
      <para>Groovy provides great support for accessing Java list objects and maps. As a Java SQL result set is nothing but a list of
      map representations, where each entry in the list defines a row in the result set and each map entry represents the columns and values. So
      with Groovy's list and map access we have great possibilities to validate a SQL result set - out of the box.</para>
      
      <para><emphasis>XML DSL</emphasis></para>
      <programlisting>&lt;sql datasource=&quot;testDataSource&quot;&gt;
    &lt;statement&gt;select ID from CUSTOMERS where NAME='${customerName}'&lt;/statement&gt;
    &lt;statement&gt;select ORDERTYPE, STATUS from ORDERS where ID='${orderId}'&lt;/statement&gt;
    
    &lt;validate-script type=&quot;groovy&quot;&gt;
        assert rows.size() == 2
        assert rows[0].ID == '1'
        assert rows[1].STATUS == 'in progress'
        assert rows[1] == [ORDERTYPE:'SampleOrder', STATUS:'in progress']               
    &lt;/validate-script&gt;
&lt;/sql&gt;</programlisting>

      <para><emphasis>Java DSL designer</emphasis></para>
      <programlisting language="java">query(dataSource)
    .statement("select ORDERTYPE, STATUS from ORDERS where ID='${orderId}'")
    .validateScript("assert rows.size == 2;" +
            "assert rows[0].ID == '1';" +
            "assert rows[0].STATUS == 'in progress';", "groovy");</programlisting>

      <para><emphasis>Java DSL runner</emphasis></para>
      <programlisting language="java">query(action -> action.dataSource(dataSource)
    .statement("select ORDERTYPE, STATUS from ORDERS where ID='${orderId}'")
    .validateScript("assert rows.size == 2;" +
            "assert rows[0].ID == '1';" +
            "assert rows[0].STATUS == 'in progress';", "groovy"));</programlisting>
      
      <para>As you can see Groovy provides fantastic access methods to the SQL result set. We can browse the result set with named column values and check the size 
      of the result set. We are also able to search for an entry, iterate over the result set and have other helpful operations. For a detailed description of the list and map 
      handling in Groovy my advice for you is to have a look at the official Groovy documentation.</para>
      
      <note><para>In general other script languages do also support this kind of list and map access. For now we just have implemented the Groovy script support,
      but the framework is ready to work with all other great script languages out there, too (e.g. Scala, Clojure, Fantom, etc.). So if you prefer to work with another language
      join and help us implement those features.</para></note>
    </section>
    
    <section id="actions-database-read-values">
      <title>Save result set values</title>
        
      <para>Now the validation of database entries is a very powerful feature but sometimes we simply do not know the
      persisted content values. The test may want to read database entries into test variables without validation. Citrus
      is able to do that with the following &lt;extract&gt; expressions:</para>
      
      <para><emphasis>XML DSL</emphasis></para>
      <programlisting>&lt;sql datasource=&quot;testDataSource&quot;&gt;
    &lt;statement&gt;select ID from CUSTOMERS where NAME='${customerName}'&lt;/statement&gt;
    &lt;statement&gt;select STATUS from ORDERS where ID='${orderId}'&lt;/statement&gt;
    
    &lt;extract column=&quot;ID&quot; variable=&quot;${customerId}&quot;/&gt;
    &lt;extract column=&quot;STATUS&quot; variable=&quot;${orderStatus}&quot;/&gt;
&lt;/sql&gt;</programlisting>
      
      <para><emphasis>Java DSL designer</emphasis></para>
      <programlisting language="java">query(dataSource)
    .statement("select STATUS from ORDERS where ID='${orderId}'")
    .extract("STATUS", "orderStatus");</programlisting>

      <para><emphasis>Java DSL runner</emphasis></para>
      <programlisting language="java">query(action -> action.dataSource(dataSource)
    .statement("select STATUS from ORDERS where ID='${orderId}'")
    .extract("STATUS", "orderStatus"));</programlisting>
      
      <para>We can save the database column values directly to test variables. Of course you can combine the value extraction 
      with the normal column validation described earlier in this chapter. Please keep in mind that we can not use these operations
      on result sets with multiple rows. Citrus will always use the first row in a result set.</para>
    </section>
</section>