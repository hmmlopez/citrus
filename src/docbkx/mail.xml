<?xml version="1.0" encoding="UTF-8"?>
<chapter id="mail">
  <title>Mail support</title>

  <para>Sending and receiving mails is the next interest we are going to talk about. When dealing with mail communication
  you most certainly need to interact with some sort of IMAP or POP mail server. But in Citrus we do not want to manage
  mails in a personal inbox. We just need to be able to exchange mail messages the persisting in a user inbox is not part
  of our business.</para>

  <para>This is why Citrus provides <emphasis>just</emphasis> a SMTP mail server which accepts mail messages from clients.
  Once the SMTP server has accepted an incoming mail it forwards those data to the running test case. In the test case
  you can receive the incoming mail message and perform message validation as usual. The mail sending part is easy as
  Citrus offers a mail client that connects to some SMTP server for sending mails to the outside world.</para>

  <note>
    <para>The mail components in Citrus are kept in a separate Maven module. So you should check that the module
      is available as Maven dependency in your project</para>

    <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.consol.citrus&lt;/groupId&gt;
  &lt;artifactId&gt;citrus-mail&lt;/artifactId&gt;
  &lt;version&gt;2.4-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</programlisting>

    <para>As usual Citrus provides a customized mail configuration schema that
      is used in Spring configuration files. Simply include the citrus-mail namespace in the configuration XML files as follows.</para>

    <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
      xmlns:citrus=&quot;http://www.citrusframework.org/schema/config&quot;
      xmlns:citrus-mail=&quot;http://www.citrusframework.org/schema/mail/config&quot;
      xsi:schemaLocation=&quot;
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.citrusframework.org/schema/config
      http://www.citrusframework.org/schema/config/citrus-config.xsd
      http://www.citrusframework.org/schema/mail/config
      http://www.citrusframework.org/schema/mail/config/citrus-mail-config.xsd&quot;&gt;

      [...]

      &lt;/beans&gt;</programlisting>

    <para>Now you are ready to use the customized Http configuration elements with the
      citrus-mail namespace prefix.</para>
  </note>

  <para>Read the next section in order to find out more about the mail message support in Citrus.</para>

  <section id="mail-client">
    <title>Mail client</title>

    <para>The mail sending part is quite easy and straight forward. We just need to send a mail message to some SMTP server. So
    Citrus provides a mail client that sends out mail messages.</para>

    <programlisting>&lt;citrus-mail:client id=&quot;simpleMailClient&quot;
      host=&quot;localhost&quot;
      port=&quot;25025&quot;/&gt;</programlisting>

    <para>This is how a Citrus mail client component is defined in the Spring application context. You can use this client
    referenced by its id or name in your test case in a message sending action. The client defines a host and port attribute which should
    connect the client to some SMTP server instance.</para>

    <para>We all know mail message contents. The mail message has some general properties set by the user:</para>

    <itemizedlist>
      <listitem>from: The message sender mail address</listitem>
      <listitem>to: The message recipient mail address. You can add multiple recipients by using a comma separated list.</listitem>
      <listitem>cc: Copy recipient mail address. You can add multiple recipients by using a comma separated list.</listitem>
      <listitem>bcc: Blind copy recipient mail address. You can add multiple recipients by using a comma separated list.</listitem>
      <listitem>subject: Some subject used as mail head line.</listitem>
    </itemizedlist>

    <para>As a tester you are able to set these properties in your test case. Citrus defines a XML mail message representation that you can
    use inside your send action. Let us have a look at this:</para>

    <programlisting>&lt;send endpoint=&quot;simpleMailClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mail-message xmlns=&quot;http://www.citrusframework.org/schema/mail/message&quot;&gt;
                &lt;from&gt;christoph@citrusframework.com&lt;/from&gt;
                &lt;to&gt;dev@citrusframework.com&lt;/to&gt;
                &lt;cc&gt;&lt;/cc&gt;
                &lt;bcc&gt;&lt;/bcc&gt;
                &lt;subject&gt;This is a test mail message&lt;/subject&gt;
                &lt;body&gt;
                    &lt;contentType&gt;text/plain; charset=utf-8&lt;/contentType&gt;
                    &lt;content&gt;Hello Citrus mail server!&lt;/content&gt;
                &lt;/body&gt;
            &lt;/mail-message&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>


    <para>The basic XML mail message representation defines a list of basic mail properties such as <emphasis>from</emphasis>, <emphasis>to</emphasis> or
    <emphasis>subject</emphasis>. In addition to that we define a text body which is either plain text or HTML. You can specify the content type of the mail
    body very easy (e.g. text/plain or text/html). By default Citrus uses <emphasis>text/plain</emphasis> content type.</para>

    <para>Now when dealing with mail messages you often come to use multipart structures for attachments. In Citrus you can define
    attachment content as base64 character sequence. The Citrus mail client will automatically create a proper multipart mail mime message
    using the content types and body parts specified.</para>

    <programlisting>&lt;send endpoint=&quot;simpleMailClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mail-message xmlns=&quot;http://www.citrusframework.org/schema/mail/message&quot;&gt;
                &lt;from&gt;christoph@citrusframework.com&lt;/from&gt;
                &lt;to&gt;dev@citrusframework.com&lt;/to&gt;
                &lt;cc&gt;&lt;/cc&gt;
                &lt;bcc&gt;&lt;/bcc&gt;
                &lt;subject&gt;This is a test mail message&lt;/subject&gt;
                &lt;body&gt;
                    &lt;contentType&gt;text/plain; charset=utf-8&lt;/contentType&gt;
                    &lt;content&gt;Hello Citrus mail server!&lt;/content&gt;
                    &lt;attachments&gt;
                        &lt;attachment&gt;
                            &lt;contentType&gt;text/plain; charset=utf-8&lt;/contentType&gt;
                            &lt;content&gt;This is attachment data&lt;/content&gt;
                            &lt;fileName&gt;attachment.txt&lt;/fileName&gt;
                        &lt;/attachment&gt;
                    &lt;/attachments&gt;
                &lt;/body&gt;
            &lt;/mail-message&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para>That completes the basic mail client capabilities. But wait we have not talked about error scenarios where mail communication
    results in error. When running into mail error scenarios we have to handle the error respectively with exception handling. When
    the mail server responded with errors Citrus will raise mail exceptions automatically and your test case fails accordingly.</para>

    <para>As a tester you can catch and assert these mail exceptions verifying your error scenario.</para>

    <programlisting>&lt;assert exception=&quot;org.springframework.mail.MailSendException&quot;&gt;
    &lt;send endpoint=&quot;simpleMailClient&quot;&gt;
        &lt;message&gt;
            &lt;payload&gt;
                &lt;mail-message xmlns=&quot;http://www.citrusframework.org/schema/mail/message&quot;&gt;
                    [...]
                &lt;/mail-message&gt;
            &lt;/payload&gt;
        &lt;/message&gt;
    &lt;/send&gt;
&lt;assert/&gt;</programlisting>

    <para>We assert the <literal>MailSendException</literal> from Spring to be thrown while sending the mail message to the SMTP server.
    With exception message validation you are able to expect very specific mail send errors on the client side. This is how you can handle
    some sort of error situation returned by the mail server. Speaking of mail servers we need to also talk about providing a mail server
    endpoint in Citrus for clients. This is part of our next section.</para>
  </section>

  <section id="mail-server">
    <title>Mail server</title>

    <para>Consuming mail messages is a more complicated task as we need to have some sort of server that clients can connect to. In
    your mail client software you typically point to some IMAP or POP inbox and receive mails from that endpoint. In Citrus we do not
    want to manage a whole personal mail inbox such as IMAP or POP would provide. We just need a SMTP server endpoint for clients to
    send mails to. The SMTP server accepts mail messages and forwards those to a running test case for further validation.</para>

    <note>
      <para>We have no user inbox where incoming mails are stored. The mail server just forwards incoming mails to the running test
      for validation. After the test the incoming mail message is gone.</para>
    </note>

    <para>And this is exactly what the Citrus mail server is capable of. The server is a very lightweight SMTP server. All incoming
    mail client connections are accepted by default and the mail data is converted into a Citrus XML mail interface representation.
    The XML mail message is then passed to the running test for validation.</para>

    <para>Let us have a look at the Citrus mail server component and how you can add it to the Spring application context.</para>

    <programlisting>&lt;citrus-mail:server id=&quot;simpleMailServer&quot;
      port=&quot;25025&quot;
      auto-start=&quot;true&quot;/&gt;</programlisting>

    <para>The mail server component receives several properties such as <emphasis>port</emphasis> or <emphasis>auto-start</emphasis>. Citrus
    starts a in memory SMTP server that clients can connect to.</para>

    <para>In your test case you can then receive the incoming mail messages on the server in order to perform the well known XML validation mechanisms
    within Citrus. The message header and the payload contain all mail information so you can verify the content with
    expected templates as usual:</para>

    <programlisting>&lt;receive endpoint=&quot;simpleMailServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mail-message xmlns=&quot;http://www.citrusframework.org/schema/mail/message&quot;&gt;
                &lt;from&gt;christoph@citrusframework.com&lt;/from&gt;
                &lt;to&gt;dev@citrusframework.com&lt;/to&gt;
                &lt;cc&gt;&lt;/cc&gt;
                &lt;bcc&gt;&lt;/bcc&gt;
                &lt;subject&gt;This is a test mail message&lt;/subject&gt;
                &lt;body&gt;
                    &lt;contentType&gt;text/plain; charset=utf-8&lt;/contentType&gt;
                    &lt;content&gt;Hello Citrus mail server!&lt;/content&gt;
                &lt;/body&gt;
            &lt;/mail-message&gt;
        &lt;/payload&gt;
        &lt;header&gt;
            &lt;element name=&quot;citrus_mail_from&quot; value=&quot;christoph@citrusframework.com&quot;/&gt;
            &lt;element name=&quot;citrus_mail_to&quot; value=&quot;dev@citrusframework.com&quot;/&gt;
            &lt;element name=&quot;citrus_mail_subject&quot; value=&quot;This is a test mail message&quot;/&gt;
            &lt;element name=&quot;citrus_mail_content_type&quot; value=&quot;text/plain; charset=utf-8&quot;/&gt;
        &lt;/header&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>

    <para>The general mail properties such as <emphasis>from</emphasis>, <emphasis>to</emphasis>, <emphasis>subject</emphasis>
    are available as elements in the mail payload and in the message header information. The message header names do start with a common Citrus mail prefix
    <emphasis>citrus_mail</emphasis>. Following from that you can verify these special mail message headers in your test
    as shown above. Citrus offers following mail headers:</para>

    <itemizedlist>
      <listitem>citrus_mail_from</listitem>
      <listitem>citrus_mail_to</listitem>
      <listitem>citrus_mail_cc</listitem>
      <listitem>citrus_mail_bcc</listitem>
      <listitem>citrus_mail_subject</listitem>
      <listitem>citrus_mail_replyTo</listitem>
      <listitem>citrus_mail_date</listitem>
    </itemizedlist>

    <para>In addition to that Citrus converts the incoming mail data to a special XML mail representation which is passed as
    message payload to the test. The mail body parts are represented as body and optional attachment elements. As this is
    plain XML you can verify the mail message content as usual using Citrus variables, functions and validation matchers.</para>

    <para>Regardless of how the mail message has passed the validation the Citrus SMTP mail server will automatically respond
    with success codes (SMTP 250 OK) to the calling client. This is the basic Citrus mail server behavior where all client
    connections are accepted an all mail messages are responded with SMTP 250 OK response codes.</para>

    <para>Now in more advanced usage scenarios the tester may want to control the mail communication outcome. User can force
    some error scenarios where mail clients are not accepted or mail communication should fail with some SMTP error state for instance.</para>

    <para>By using a more advanced mail server setup the tester gets more power to sending back mail server response
    codes to the mail client. Just use the advanced mail adapter implementation in your mail server component configuration:</para>

    <programlisting>&lt;citrus-mail:server id=&quot;advancedMailServer&quot;
      auto-accept=&quot;false&quot;
      split-multipart=&quot;true&quot;
      port=&quot;25025&quot;
      auto-start=&quot;true&quot;/&gt;</programlisting>

    <para>We have disabled the <emphasis>auto-accept</emphasis> mode on the mail server. This means that we have to do some additional steps
    in your test case to accept the incoming mail message first. So we can decide in our test case whether to accept or decline the incoming
    mail message for a more powerful test. You accept/decline a mail message with a special XML accept request/response exchange in your test case:</para>

    <programlisting>&lt;receive endpoint=&quot;advancedMailServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;accept-request xmlns=&quot;http://www.citrusframework.org/schema/mail/message&quot;&gt;
                &lt;from&gt;christoph@citrusframework.com&lt;/from&gt;
                &lt;to&gt;dev@citrusframework.com&lt;/to&gt;
            &lt;/accept-request&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>

    <para>So before receiving the actual mail message we receive this simple accept-request in our test. The accept request gives us the message <emphasis>from</emphasis>
    and <emphasis>to</emphasis> resources of the mail message. Now the test decides to also decline a mail client connection. You can simulate that the server does not accept the mail
    client connection by sending back a negative accept response.</para>

    <programlisting>&lt;send endpoint=&quot;advancedMailServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;accept-response xmlns=&quot;http://www.citrusframework.org/schema/mail/message&quot;&gt;
                &lt;accept&gt;true&lt;/accept&gt;
            &lt;/accept-response&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para>Depending on the accept outcome the mail client will receive an error response with proper error codes. If you accept the mail message with a positive accept response the next
    step in your test receives the actual mail message as we have seen it before in this chapter.</para>

    <para>Now besides not accepting a mail message in the first place you can als simulate another error scenario with the mail server. In this scenario the mail server should
    respond with some sort of SMTP error code after accepting the message. This is done with a special mail response message like this:</para>

    <programlisting>&lt;receive endpoint=&quot;advancedMailServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mail-message xmlns=&quot;http://www.citrusframework.org/schema/mail/message&quot;&gt;
                &lt;from&gt;christoph@citrusframework.com&lt;/from&gt;
                &lt;to&gt;dev@citrusframework.com&lt;/to&gt;
                &lt;cc&gt;&lt;/cc&gt;
                &lt;bcc&gt;&lt;/bcc&gt;
                &lt;subject&gt;This is a test mail message&lt;/subject&gt;
                &lt;body&gt;
                    &lt;contentType&gt;text/plain; charset=utf-8&lt;/contentType&gt;
                    &lt;content&gt;Hello Citrus mail server!&lt;/content&gt;
                &lt;/body&gt;
            &lt;/mail-message&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/receive&gt;

&lt;send endpoint=&quot;advancedMailServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;mail-response xmlns=&quot;http://www.citrusframework.org/schema/mail/message&quot;&gt;
                &lt;code&gt;443&lt;/code&gt;
                &lt;message&gt;Failed!&lt;/message&gt;
            &lt;/mail-response&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para>As you can see from the example above we first accept the connection and receive the mail content as usual. Now the test returns a negative mail response
    with some error code reason set. The Citrus SMTP communication will then fail and the calling mail client receives the respective error.</para>

    <para>If you skip the negative mail response the server will automatically response with positive SMTP response codes to the calling client.</para>
  </section>

</chapter>
