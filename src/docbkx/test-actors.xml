<?xml version="1.0" encoding="UTF-8"?>
<chapter id="test-actors">
  <title>Test actors</title>

  <para>The concept of test actors came to our mind when reusing Citrus test cases in end-to-end test scenarios. Usually 
  Citrus simulates all interface partners within a test case which is great for continuous integration testing. In end-to-end integration test scenarios
  some of our interface partners may be real and alive. Some other interface partners still require Citrus simulation logic.</para>
  
  <para>It would be great if we could reuse the Citrus integration tests in this test setup as we have the complete test flow of messages available in the Citrus tests. We only have to remove 
  the simulated send/receive actions for those real interface partner applications which are available in our end-to-end test setup.</para>
  
  <para>With test actors we have the opportunity to link test actions, in particular send/receive message actions, to a test actor. The test actor can be disabled in configuration 
  very easy and following from that all linked send/receive actions are disabled, too. One Citrus test case is runnable with different test setup scenarios where different partner applications 
  on the one hand are available as real life applications and on the other hand my require simulation.</para>
  
  <section id="test-actors-define">
    <title>Define test actors</title>
    
    <para>First thing to do is to define one or more test actors in Citrus configuration. A test actor represents a participating party (e.g. interface partner, backend application). We write
    the test actors into the central citrus-context.xml. We can use a special Citrus Spring XML schema so definitions are quite easy:</para>
    
    <programlisting>&lt;citrus:actor id=&quot;travelagency&quot; name=&quot;TRAVEL_AGENCY&quot;/&gt;
&lt;citrus:actor id=&quot;royalairline&quot; name=&quot;ROYAL_AIRLINE&quot;/&gt;
&lt;citrus:actor id=&quot;smartariline&quot; name=&quot;SMART_AIRLINE&quot;/&gt;</programlisting>

    <para>The listing above defines three test actors participating in our test scenario. A travel agency application which is simulated by Citrus as a calling client, the smart airline application 
    and a royal airline application. Now we have the test actors defined we can link those to message sender/receiver instances and/or test actions within our test case.</para>
  </section>
  
  <section id="test-actors-link">
    <title>Link test actors</title>
    
    <para>We need to link the test actors to message send and receive actions in our test cases. We can do this in two different ways. First we can set a test actor reference on a message sender and message
    receiver.</para>
    
    <programlisting>&lt;citrus-jms:sync-endpoint id=&quot;royalAirlineBookingEndpoint&quot;
        destination-name=&quot;${royal.airline.request.queue}&quot;
        actor=&quot;royalairline&quot;/&gt;</programlisting>
    
    <para>Now all test actions that are using these message receiver and message sender instances are linked to the test actor. In addition to that you can also explicitly link test actions to 
    test actors in a test.</para>
    
    <programlisting>&lt;receive endpoint=&quot;royalAirlineBookingEndpoint&quot; actor=&quot;royalairline&quot;&gt;
    &lt;message&gt;
        [...]
    &lt;/message&gt;
&lt;/receive&gt;

&lt;send endpoint=&quot;royalAirlineBookingEndpoint&quot; actor=&quot;royalairline&quot;&gt;
    &lt;message&gt;
        [...]
    &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para>This explicitly links test actors to test actions so you can decide which link should be set without having to rely on the message receiver and sender configuration.</para>
  </section>
  
  <section id="test-actors-disable">
    <title>Disable test actors</title>
    
    <para>Usually both airline applications are simulated in our integration tests. But this time we want to change this by introducing a royal airline application which is 
    online as a real application instance. So we need to skip all simulated message interactions for the royal airline application in our Citrus tests. This is easy as we have linked all send/receive 
    actions to one of our test actors. So wen can disable the royal airline test actor in our configuration:</para>
    
    <programlisting>&lt;citrus:actor id=&quot;royalairline&quot; name=&quot;ROYAL_AIRLINE&quot; disabled=&quot;true&quot;/&gt;</programlisting>
    
    <para>Any test action linked to this test actor is now skipped. As we introduced a real royal airline application in our test scenario the requests get answered and the test should be successful
    within this end-to-end test scenario. The travel agency and the smart airline still get simulated by Citrus. This is a perfect way of reusing integration tests in different test scenarios where 
    you enable and disable simulated participating parties in Citrus.</para>
    
    <important><para>Server ports may be of special interest when dealing with different test scenarios. You may have to also disable a Citrus embedded Jetty server instance in order to avoid port binding conflicts
    and you may have to wire endpoint URIs accordingly before executing a test. The real life application may not use the same port and ip as the Citrus embedded servers for simulation.</para></important>  
  </section>
</chapter>