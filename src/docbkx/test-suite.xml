<?xml version="1.0" encoding="UTF-8"?>
<chapter id="testsuite">
    <title>Test suite actions</title>

    <para>A test framework should also provide the functionality to do some work before and after the test run. You could think of 
    preparing/deleting the data in a database or starting/stopping a server in this section before/after a test run. These tasks fit 
    best into the initialization and cleanup phases of Citrus. All you have to do is add some Spring bean definitions to the Citrus 
    application context.</para>

    <note>
      <para>It is important to notice that the Citrus configuration components that we are going to use in the next section belong to a separate
      XML namespace <emphasis>citrus-test</emphasis>. We have to add the namespace declaration to the XML root element of our XML configuration file accordingly.</para>

      <programlisting>&lt;spring:beans xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot;
        xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:citrus-test=&quot;http://www.citrusframework.org/schema/testcase&quot;
        xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.citrusframework.org/schema/testcase
        http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd&quot;&gt;

        [...]

        &lt;/beans&gt;</programlisting>
    </note>
    
    <section id="testsuite-before">
        <title>Before suite</title>
        
        <para>You can influence the behavior of a test run in the initialization phase actually before the tests are executed. 
        See the next code example to find out how it works with actions that take place before the first test is executed:</para>
        
        <programlisting>&lt;citrus:before-suite id=&quot;actionsBeforeSuite&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;!-- list of actions before suite --&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:before-suite&gt;</programlisting>

        <para>The Citrus configuration component holds a list of Citrus test actions that get executed before the test suite run. You can
        add all Citrus test actions here as you would do in a normal test case definition.</para>
  
        <programlisting>&lt;citrus:before-suite id=&quot;actionsBeforeSuite&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;citrus-test:sql dataSource=&quot;testDataSource&quot;/&gt;
            &lt;citrus-test:statement&quot;&gt;CREATE TABLE PERSON (ID integer, NAME char(250))&lt;/citrus-test:statement&gt;
        &lt;/citrus-test:sql&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:before-suite&gt;</programlisting>
        <para>Note that we must use the Citrus test case namespace for the nested test action definitions. We access the database and
          create a table PERSON which is obviously needed in our test cases. You can think of several actions here to prepare the database for instance.</para>

        <tip>
            <para>Citrus offers special startup and shutdown actions that may start and stop server implementations automatically. This might
            be helpful when dealing with Http servers or WebService containers like Jetty. You can also think of starting/stopping a
            JMS broker before a test run.</para>
        </tip>

        <para>You can have many after-suite configuration components with different ids in a Citrus project. By default the containers are always executed. But you can restrict the after suite action container execution by defining a suite name or
          test group names that should match accordingly:</para>

        <programlisting>&lt;citrus:before-suite id=&quot;actionsBeforeSuite&quot; suites=&quot;databaseSuite&quot; groups=&quot;e2e&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;citrus-test:sql dataSource=&quot;testDataSource&quot;/&gt;
            &lt;citrus-test:statement&quot;&gt;CREATE TABLE PERSON (ID integer, NAME char(250))&lt;/citrus-test:statement&gt;
        &lt;/citrus-test:sql&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:before-suite&gt;</programlisting>

        <para>The above after suite container is only executed with the test suite called <emphasis>databaseSuite</emphasis> or when the test group <emphasis>e2e</emphasis> is defined. Test groups and suite names are only supported
          when using the TestNG unit test framework. Unfortunately JUnit does not allow to hook into suite execution as easily as TestNG does. This is why after suite action containers are not restricted in execution when using Citrus with
          the JUnit test framework.</para>

        <para>You can define multiple suite names and test groups with comma delimited strings as attribute values.</para>
    </section>

    <section id="testsuite-after">
        <title>After suite</title>

        <para>A test run may require the test environment to be clean. Therefore it is a good idea to purge all JMS destinations
        or clean up the database after the test run in order to avoid errors in follow-up test runs. Just like we prepared some data in actions before suite we can clean up the test run
        in actions after the tests are finished. The Spring bean syntax here is not significantly different to those in before suite section:</para>

        <programlisting>&lt;citrus:after-suite id=&quot;actionsAfterSuite&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;!-- list of actions after suite --&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:after-suite&gt;</programlisting>

        <para>Again we give the after suite configuration component a unique id within the configuration and put one to many test actions as nested configuration elements to the list
        of actions executed after the test suite run.</para>

        <programlisting>&lt;citrus:after-suite id=&quot;actionsAfterSuite&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;citrus-test:sql dataSource=&quot;testDataSource&quot;/&gt;
            &lt;citrus-test:statement&quot;&gt;DELETE FROM TABLE PERSON&lt;/citrus-test:statement&gt;
        &lt;/citrus-test:sql&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:after-suite&gt;</programlisting>
        <para>We have to use the Citrus test case XML namespace when defining nested test actions in after suite list. We just remove all data from the database so we do not influence follow-up tests. Quite simple isn't it!?</para>

        <para>You can have many after-suite configuration components with different ids in a Citrus project. By default the containers are always executed. But you can restrict the after suite action container execution by defining a suite name or
        test group names that should match accordingly:</para>

        <programlisting>&lt;citrus:after-suite id=&quot;actionsAfterSuite&quot; suites=&quot;databaseSuite&quot; groups=&quot;e2e&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;citrus-test:sql dataSource=&quot;testDataSource&quot;/&gt;
            &lt;citrus-test:statement&quot;&gt;DELETE FROM TABLE PERSON&lt;/citrus-test:statement&gt;
        &lt;/citrus-test:sql&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:after-suite&gt;</programlisting>

        <para>The above after suite container is only executed with the test suite called <emphasis>databaseSuite</emphasis> or when the test group <emphasis>e2e</emphasis> is defined. Test groups and suite names are only supported
        when using the TestNG unit test framework. Unfortunately JUnit does not allow to hook into suite execution as easily as TestNG does. This is why after suite action containers are not restricted in execution when using Citrus with
        the JUnit test framework.</para>

        <para>You can define multiple suite names and test groups with comma delimited strings as attribute values.</para>
    </section>
    
    <section id="testsuite-before-test">
        <title>Before test</title>
        
        <para>Before each test is executed it also might sound reasonable to purge all JMS queues for instance. In case a previous test fails some messages might be left in the JMS queues. 
        Also the database might be in dirty state. The follow-up test then will be confronted with these invalid messages and data. Purging all JMS destinations before a test is therefore a 
        good idea. Just like we prepared some data in actions before suite we can clean up the data before a test starts to execute.</para>
        
        <programlisting>&lt;citrus:before-test id=&quot;defaultBeforeTest&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;!-- list of actions before test --&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:before-test&gt;</programlisting>

        <para>The before test configuration component receives a unique id and a list of test actions that get executed before a test case is started. The component receives usual test action definitions just like you would write them in
          a normal test case definition. See the example below how to add test actions.</para>
  
        <programlisting>&lt;citrus:before-test id=&quot;defaultBeforeTest&quot;&gt;
    &lt;citrus:actions&gt;
            &lt;citrus-test:echo&gt;
              &lt;citrus-test:message&gt;This is executed before each test!&lt;/citrus-test:message&gt;
            &lt;/citrus-test:echo&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:before-test&gt;</programlisting>

        <para>Note that we must use the Citrus test case XML namespace for the nested test action definitions. You have to declare the XML namespaces accordingly in your configuration root element. The echo test action is now executed before each test in our
          test suite run. Also notice that we can restrict the before test container execution. We can restrict execution based on the test name, package and test groups. See following example how this works:</para>

        <programlisting>&lt;citrus:before-test id=&quot;defaultBeforeTest&quot; test=&quot;*_Ok_Test&quot; package=&quot;com.consol.citrus.longrunning.*&quot;&gt;
    &lt;citrus:actions&gt;
            &lt;citrus-test:echo&gt;
              &lt;citrus-test:message&gt;This is executed before each test!&lt;/citrus-test:message&gt;
            &lt;/citrus-test:echo&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:before-test&gt;</programlisting>

        <para>The above before test component is only executed for test cases that match the name pattern <emphasis>*_Ok_Test</emphasis> and that match the package <emphasis>com.consol.citrus.longrunning.*</emphasis>. Also we could just use the test name pattern or
        the package name pattern exclusively. And the execution can be restricted based on the included test groups in our test suite run. This enables us to specify before test actions in various ways. Of course you can have multiple before test configuration components
        at the same time. Citrus will pick the right containers and put it to execution when necessary.</para>
    </section>

    <section id="testsuite-after-test">
        <title>After test</title>

        <para>The same logic that applies to the <emphasis>before-test</emphasis> configuration component can be done after each test. The <emphasis>after-test</emphasis> configuration component defines test actions executed after each test. Just like we prepared some data
          in actions before a test we can clean up the data after a test has finished execution.</para>

        <programlisting>&lt;citrus:after-test id=&quot;defaultAfterTest&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;!-- list of actions after test --&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:after-test&gt;</programlisting>

        <para>The after test configuration component receives a unique id and a list of test actions that get executed after a test case is finished. Notice that the after test actions are executed no matter what result success or failure the previous test case came up to.
          The component receives usual test action definitions just like you would write them in a normal test case definition. See the example below how to add test actions.</para>

        <programlisting>&lt;citrus:after-test id=&quot;defaultAfterTest&quot;&gt;
    &lt;citrus:actions&gt;
            &lt;citrus-test:echo&gt;
              &lt;citrus-test:message&gt;This is executed after each test!&lt;/citrus-test:message&gt;
            &lt;/citrus-test:echo&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:after-test&gt;</programlisting>

        <para>Please be aware of the fact that we must use the Citrus test case XML namespace for the nested test action definitions. You have to declare the XML namespaces accordingly in your configuration root element. The echo test action is now executed after each test in our
          test suite run. Of course we can restrict the after test container execution. Supported restrictions are based on the test name, package and test groups. See following example how this works:</para>

        <programlisting>&lt;citrus:after-test id=&quot;defaultAfterTest&quot; test=&quot;*_Error_Test&quot; package=&quot;com.consol.citrus.error.*&quot;&gt;
    &lt;citrus:actions&gt;
            &lt;citrus-test:echo&gt;
              &lt;citrus-test:message&gt;This is executed after each test!&lt;/citrus-test:message&gt;
            &lt;/citrus-test:echo&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:after-test&gt;</programlisting>

        <para>The above after test component is obviously only executed for test cases that match the name pattern <emphasis>*_Error_Test</emphasis> and that match the package <emphasis>com.consol.citrus.error.*</emphasis>. Also we could just use the test name pattern or
        the package name pattern exclusively. And the execution can be restricted based on the included test groups in our test suite run. This enables us to specify after test actions in various ways. Of course you can have multiple after test configuration components
        at the same time. Citrus will pick the right containers and put it to execution when necessary.</para>
    </section>
</chapter>