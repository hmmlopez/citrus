<?xml version="1.0" encoding="UTF-8"?>
<chapter id="endpoints">
  <title>Endpoints</title>

  <para>In one of the previous chapters we have discussed the basic test case structure as we introduced <emphasis>variables</emphasis> and
  <emphasis>test actions</emphasis>. The &lt;actions&gt; section contains a list of test actions that take place during the test case. 
  Each test action is executed in sequential order by default. Citrus offers several built-in test actions that the user can choose from to construct a complex
  testing workflow without having to code everything from scratch. In particular Citrus aims to provide all the test actions that you need as predefined components 
  ready for you to use. The goal is to minimize the coding effort for you so you can concentrate on the test logic itself.</para>

  <para>Exactly the same approach is used in Citrus to provide ready-to-use endpoint component for connecting to different message transports. There are several ways in
  an enterprise application to exchange messages with some other application. We have synchronous interfaces like Http and SOAP WebServices. We have asynchronous messaging with
  JMS or file transfer FTP interfaces.</para>

  <para>Citrus provides endpoint components as client and server to connect with these typical message transports. So you as a tester must not care about how to send a
  message to a JMS queue. The Citrus endpoints are configured in the Spring application context and receive endpoint specific properties like endpoint uri or ports or message timeouts as
  configuration.</para>

  <para>The next figure shows a typical message sending endpoint component in Citrus:</para>
  
  <mediaobject>
    <imageobject role="fo">
      <imagedata align="center" width="450px" scale="100" fileref="figure_002.jpg" format="JPG" />
    </imageobject>
    
    <imageobject role="html">
      <imagedata align="center" display="block" fileref="figure_002.jpg" format="JPG" />
    </imageobject>
  </mediaobject>

  <para>The endpoint producer publishes messages to a destination. This destination can be a JMS queue/topic, a SOAP WebService endpoint, a Http URL, a FTP folder destination
  and so on. The producer just takes a previously defined message definition (header and payload) and sends it to the message destination.</para>
  
  <para>Similar to that Citrus defines the several endpoint consumer components to consume messages from destinations. This can be a simple subscription
  on message channels and JMS queues/topics. In case of SOAP WebServices and Http GET/POST things are more complicated as we have to provide a 
  server component that clients can connect to. We will handle server related communication in more detail later on. For now
  the endpoint consumer component in its most simple way is defined like this:</para>
  
  <mediaobject>
    <imageobject role="fo">
      <imagedata align="center" width="450px" scale="100" fileref="figure_003.jpg" format="JPG" />
    </imageobject>
    
    <imageobject role="html">
      <imagedata align="center" display="block" fileref="figure_003.jpg" format="JPG" />
    </imageobject>
  </mediaobject>

  <para>This is all you need to know about Citrus endpoints. We have mentioned that the endpoints are defined in the Spring application context. Let's have a simple example that shows the basic idea:</para>

  <programlisting>&lt;citrus-jms:endpoint id=&quot;helloServiceEndpoint&quot;
        destination-name=&quot;Citrus.HelloService.Request.Queue&quot;
        connection-factory=&quot;myConnectionFacotry&quot;/&gt;</programlisting>

  <para>This is a simple JMS endpoint component in Citrus. The endpoint XML bean definition follows a custom XML namespace and defines endpoint specific properties like the JMS destination name and the JMS connection
  factory. The endpoint id is a significant property as the test cases will reference this endpoint when sending and receiving messages by its identifier.</para>
  
  <para>In the next sections you will learn how a test case uses those endpoint components for producing and consuming messages.</para>
  
  <section id="endpoints-send">
    <title>Send messages with endpoints</title>

    <para>The &lt;send&gt; action in a test case publishes messages to a destination. The actual message transport connection is defined with the endpoint component. The test case simply defines the message contents
      and references a predefined message endpoint component by its identifier. Endpoint specific configurations are centralized in the Spring bean application context while multiple test cases can reference the endpoint
      to actually publish the constructed message to a destination. There are several message endpoint implementations in Citrus available representing different transport protocols like JMS, SOAP, HTTP, TCP/IP and many more.</para>
     
    <para>Again the type of transport to use is not specified inside the test case but in the message endpoint definition. The separation of concerns (test case/message sender transport)
    gives us a good flexibility of our test cases. The test case does not know anything about connection factories, queue names or endpoint uri, connection timeouts and so on. The transport
    internals underneath a sending test action can change easily without affecting the test case definition. We will see later in this document how to create different message endpoints for
    various transports in Citrus. For now we concentrate on constructing the message content to be sent.</para>
    
    <para>We assume that the message's payload will be plain XML format. Citrus uses XML as the default data format for message payload data. But Citrus is not limited to XML message format 
    though; you can always define other message data formats such as JSON, plain text, CSV. As XML is still a very popular message format in enterprise applications and message-based solution
    architectures we have this as a default format. Anyway Citrus works best on XML payloads and you will see a lot of example code in this document using XML. Finally let us have a look at a 
    first example how a sending action is defined in the test.</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;testcase name=&quot;SendMessageTest&quot;&gt;
    &lt;description&gt;Basic send message example&lt;/description&gt;

    &lt;actions&gt;
        &lt;send endpoint=&quot;helloServiceEndpoint&quot;&gt;
            &lt;message&gt;
                &lt;payload&gt;
                    &lt;TestMessage&gt;
                        &lt;Text&gt;Hello!&lt;/Text&gt;
                    &lt;/TestMessage&gt;
                &lt;/payload&gt;
            &lt;/message&gt;
            &lt;header&gt;
                &lt;element name=&quot;Operation&quot; value=&quot;sayHello&quot;/&gt;
            &lt;/header&gt;
        &lt;/send&gt;
    &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>
    
    <para>Now lets have a closer look at the sending action. The <emphasis>'endpoint'</emphasis> attribute might catch your attention first.
    This attribute references the message endpoint in Citrus configuration by its identifier. As previously mentioned the message endpoint
    definition lives in a separate configuration file and contains the actual message transport settings. In this example the
    <emphasis>&quot;helloServiceEndpoint&quot;</emphasis> is referenced which is a JMS endpoint for sending out messages to a JMS queue for instance.</para>
    
    <para>The test case is not aware of any transport details, because it does not have to. The advantages are obvious: On the one hand multiple test
    cases can reference the message endpoint definition for better reuse. Secondly test cases are independent of message transport details.
    So connection factories, user credentials, endpoint uri values and so on are not present in the test case.</para>
    
    <para>In other words the <emphasis>&quot;endpoint&quot;</emphasis> attribute of the <emphasis>&lt;send&gt;</emphasis> element specifies
    which message endpoint definition to use and therefore where the message should go to. Once again all available message endpoints are
    configured in a separate Citrus configuration file. Be sure to always pick the right message endpoint type
    in order to publish your message to the right destination.</para>
    
    <para>If you do not like the XML language you can also use pure Java code to define the same test. In Java you would also make use of the message endpoint
    definition and reference this instance. The same test as shown above in Java DSL looks like this:</para>
    
    <para><emphasis>Java DSL designer</emphasis></para>
    <programlisting language="java">import org.testng.ITestContext;
import org.testng.annotations.Test;
import com.consol.citrus.annotations.CitrusTest;
import com.consol.citrus.dsl.testng.TestNGCitrusTestDesigner;

@Test
public class SendMessageTestDesigner extends TestNGCitrusTestDesigner {

    @CitrusTest(name = "SendMessageTest")
    public void sendMessageTest() {
        description("Basic send message example");
    
        send("helloServiceEndpoint")
            .payload("&lt;TestMessage&gt;" +
                        "&lt;Text&gt;Hello!&lt;/Text&gt;" +
                    "&lt;/TestMessage&gt;")
            .header("Operation", "sayHello");
    }
}</programlisting>

    <para>Instead of using the XML tags for send we use methods from <emphasis>TestNGCitrusTestDesigner</emphasis> class. The same message endpoint
    is referenced within the send message action. The payload is constructed as plain Java character sequence which is a bit verbose. We will see
    later on how we can improve this. For now it is important to understand the combination of send test action and a message endpoint.</para>
    
    <tip>
        <para>It is good practice to follow naming conventions when defining names for message endpoints. The intended purpose of the message
        endpoint as well as the sending/receiving actor should be clear when choosing the name. For instance messageEndpoint1,
        messageEndpoint2 will not give you much hints to the purpose of the message endpoint.</para>
    </tip>

    <para>This is basically how to send messages in Citrus. The test case is responsible for constructing the message content while the predefined message endpoint holds transport specific
    settings. Test cases reference endpoint components to publish messages to the outside world. This is just the start of action. Citrus supports a whole package of other ways how to define and manipulate
    the message contents. Read more about message sending actions in <xref linkend="actions-send"/>.</para>
  </section>
  
  <section id="endpoints-receive">
    <title>Receive messages with endpoints</title>

    <para>Now we have a look at the message receiving part inside the test. A simple example shows how it works.</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;receive endpoint=&quot;helloServiceEndpoint&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;TestMessage&gt;
                &lt;Text&gt;Hello!&lt;/Text&gt;
            &lt;/TestMessage&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
    &lt;header&gt;
        &lt;element name=&quot;Operation&quot; value=&quot;sayHello&quot;/&gt;
    &lt;/header&gt;
&lt;/receive&gt;</programlisting>
    
    <para>If we recap the send action of the previous chapter we can identify some common mechanisms that apply for both
    sending and receiving actions. The test action also uses the <emphasis>endpoint</emphasis> attribute for referencing
    a predefined message endpoint. This time we want to receive a message from the endpoint. Again the test is not aware of the
    transport details such as JMS connections, endpoint uri, and so on. The message endpoint component encapsulates this information.</para>
    
    <para>Before we go into detail on validating the received message we have a quick look at the Java DSL variation for the
    receive action. The same receive action as above looks like this in Java DSL.</para>

    <para><emphasis>Java DSL designer</emphasis></para>
    <programlisting language="java">@CitrusTest
public void messagingTest() {
    receive("helloServiceEndpoint")
        .payload("&lt;TestMessage&gt;" +
                    "&lt;Text&gt;Hello!&lt;/Text&gt;" +
                "&lt;/TestMessage&gt;")
        .header("Operation", "sayHello");
}</programlisting>

    <para>The receive action waits for a message to arrive. The whole test execution is stopped while waiting for the message. This is
    important to ensure the step by step test workflow processing. Of course you can specify message timeouts so the receiver will only
    wait a given amount of time before raising a timeout error. Following from that timeout exception the test case fails as the message
    did not arrive in time. Citrus defines default timeout settings for all message receiving tasks.</para>

    <para>At this point you know the two most important test actions in Citrus. Sending and receiving actions will become the main components of your integration tests when dealing
    with loosely coupled message based components in a enterprise application environment. It is very easy to create complex message flows, meaning a sequence of sending and receiving actions in your test case.
    You can replicate use cases and test your message exchange with extended message validation capabilities. See <xref linkend="actions-receive"/> for a more detailed description on how to validate incoming messages
    and how to expect message contents in a test case.</para>
  </section>

  <para>Now we have seen the basic endpoint concept in Citrus. The endpoint components represent the connections to the test boundary systems. This is how we can connect to the system under test for message exchange. And this
  is our main goal with this integration test framework. We want to provide easy access to common message transports on client and server side so that we can test the communication interfaces on a real message transport exchange.</para>
</chapter>
