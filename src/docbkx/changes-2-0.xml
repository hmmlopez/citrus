<?xml version="1.0" encoding="UTF-8"?>
<section id="history-2-0">
    <title>Changes in Citrus 2.0</title>

    <para>Citrus 2.0 is a major version upgrade and therefore big things should be happening. In the following sections
      we shortly describe the Citrus evolution. We want you to get a quick overview of what has happened and all the new
      things in Citrus. So hopefully you can spot your favorite new feature.</para>

    <section id="history-2-0-refactoring">
      <title>Refactoring</title>

      <para>In Citrus 1.4 we began to refactor the configuration components in Citrus. This refactoring was finalized in Citrus 2.0 which means that all deprecated
        classes and api are no longer supported. The classes were removed so you get compilation errors when using those old stuff. If you still use the old configuration see
        this <ulink url="http://citrusframework.org/migration-sheet.html">migration-sheet</ulink> in order to learn how to upgrade to the new configuration. It is worth to do so!
        In addition to that we did refactoring in following fields:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Reply message correlation</emphasis> In synchronous communication scenarios Citrus optionally correlated messages across send and receive test actions.
            In default setting the message correlation was disabled. With 2.0 release we changed this behavior to the opposite. Now message correlation is done by default with a
            default correlation algorithm. So in case you used the DefaultReplyMessageCorrelator in Citrus before you will not have to do so in future as this is done by default.
            The message correlation gives us more robust tests especially when executing tests in parallel. In the test case you do not have to do anything for proper message correlation.</para>
        </listitem>
        <listitem>
          <para><emphasis>Citrus message API</emphasis> We have refactored the Citrus message API to use custom message objects in endpoints, consumers and producers. This has no affect on your tests
            or configuration unless you have written endpoint extensions or custom endpoints on your own. You might have to refector your code accordingly. Have a look at the Citrus endpoint implementations
            in order to see how the new message API works for you.</para>
        </listitem>
        <listitem>
          <para><emphasis>Sleep time in milliseconds</emphasis> This is something that we definitely carry around since the beginning of Citrus. The time values in sleep
            test action were done in seconds, which is inconvenient when using time periods below one second or non natural numbers. Now you can choose to use milliseconds which
            is more likely how you should configure time periods anyway. See <xref linkend="actions-sleep"/> for details</para>
        </listitem>
        <listitem>
          <para><emphasis>Auto sleep time in milliseconds</emphasis> We used seconds when using auto sleep in repeat on error container. This led to the fact that we were not able to
            sleep time periods below one second. Also it was not possible to specify non natural numbers such as 1.5 seconds auto sleep time. We changed to milliseconds which
            is more likely how you are used to configure time periods anyway. See <xref linkend="containers-repeat-onerror"/> for details</para>
        </listitem>
        <listitem>
          <para><emphasis>Message handler vs. endpoint adapter</emphasis> In previous releases prior to 1.4 we had message handlers on server side that were able to forward in coming requests to message
            channels or jms destinations. The old message handler implementations were removed in 2.0. Instead you should use the <emphasis>endpoint-adapter</emphasis> implementations. See <xref linkend="endpoint-adapter"/> how that works.</para>
        </listitem>
        <listitem>
          <para><emphasis>XML endpoint reference attribute</emphasis> In a XML test case you reference the message endpoint in the send and receive actions with a special attribute called <emphasis>with</emphasis>.
            This attribute is no longer supported and was removed. Instead you should use the <emphasis>endpoint</emphasis> attribute which was introduced in Citrus 1.4 and has the exact same functionality.</para>
        </listitem>
        <listitem>
          <para><emphasis>Removed citrus-adapter module</emphasis> The Maven module <emphasis>citrus-adapter</emphasis> was removed. Classes and API moved to <emphasis>citrus-core</emphasis> module. For endpoint adapters
            do use the new configuration components that were introduced in Citrus 1.4. See <xref linkend="endpoint-adapter"/> for details.</para>
        </listitem>
        <listitem>
          <para><emphasis>WebServiceEndpoint class renamed</emphasis> In terms of package refactoring the <emphasis>com.consol.citrus.ws.WebServiceEndpoint</emphasis> was renamed to <emphasis>com.consol.citrus.ws.server.WebServiceEndpoint</emphasis></para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="history-2-0-spring-4">
      <title>Spring framework 4.x</title>

      <para>In terms of upgrading the Citrus API dependencies we introduced Spring 4.x versions. This includes the core Spring framework libraries as well as the Spring Integration and Spring WebService project artifacts. So with the major version upgrade lots of
        API changes were also done in Citrus code in order to meet the new Spring 4.x API. So we recommend for you to also use Spring 4.x version in your Citrus projects.</para>
    </section>

    <section id="history-2-0-ftp">
      <title>FTP support</title>

      <para>New member of the Citrus family deals with FTP connectivity. The new <emphasis>citrus-ftp</emphasis> module provides a neat ftp server and client implementation so you can send and receive messages vie FTP message transport.
        <xref linkend="ftp"/> describes the new functionality in detail.</para>
    </section>

    <section id="history-2-0-functions-refactoring">
      <title>Functions with test context access</title>

      <para>Functions are now able to access the test context. This enables you to access all test variables and other central test related components
        in a function implementation. Therefore the function Java interface has now an additional test context parameter. Refactor your custom written functions accordingly to meet the new interface rules.
        See <ulink url="http://www.citrusframework.org/tutorials-functions.html">how to write custom functions</ulink> for details.</para>
    </section>

    <section id="history-2-0-matcher-refactoring">
      <title>Validation matcher with test context access</title>

      <para>Just like functions now validation matchers are able to access the test context. This enables you to access all test variables and other central test related components
        in a validation matcher implementation. The validation matcher Java interface has changed accordingly with an additional test context parameter. Refactor your custom written matcher implementation accordingly to meet the new interface rules.</para>
    </section>

    <section id="history-2-0-message-listener-refactoring">
      <title>Message listener with test context access</title>

      <para>Message listeners do now also have access to the test context. This is more powerful as you can access test variables and other central components within the test context.</para>
    </section>

    <section id="history-2-0-soap-jms">
      <title>SOAP over JMS</title>

      <para>SOAP over JMS was supported in Citrus from the very beginning. Unfortunately you had to always specify the whole SOAP envelope in your test case. SOAP envelope handling is now done automatically by Citrus when using the new <emphasis>SoapJmsMessageConverter</emphasis>.
        The converter takes care on constructing a proper SOAP envelope message. See <xref linkend="jms-soap"/> for details.</para>
    </section>

    <section id="history-2-0-soap-attachments">
      <title>Multiple SOAP attachments</title>

      <para>When sending and receiving SOAP messages with Citrus as client or server you can add one to many attachments to the message. Before it was only possible to have one single attachment in a message. Now you have no limits in defining SOAP attachments.
        See <xref linkend="soap-webservices"/> for details.</para>
    </section>

    <section id="history-2-0-soap-header">
      <title>Multiple SOAP XML header fragments</title>

      <para>The SOAP header can hold multiple XML header fragments with different namespaces and content. With Citrus 2.0 you are able to construct such a SOAP message with multiple header contents.
        See <xref linkend="soap-webservices"/> for details.</para>
    </section>

    <section id="history-2-0-variable-matcher">
      <title>Create variable validation matcher</title>

      <para>A new validation matcher implementation is able to create a new variable on the fly. The actual field name is used as variable name and the element value as variable value. The variable name can slo be customized with optional
        validation matcher parameter. This is a great alternative to the XPath expression evaluating variable extraction. Also very handsome to use this validation matcher in Json message payloads. See <xref linkend="validation-matcher-variable"/> for details.</para>
    </section>

    <section id="history-2-0-configuration-components">
      <title>New configuration components</title>

      <para>A major part of the Citrus configuration is done in a Spring bean application context. Central Citrus components and features are added as Spring beans to the application context. Now with Citrus 2.0 we have added special configuration components
        for almost all features. This means that you can easily add configuration using the new XML schema components. See which components are available:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Function library</emphasis> Custom function libraries with custom function implementations are now configured with the <emphasis>function-library</emphasis> XML schema components in
            the Spring application context configuration. See <xref linkend="functions"/> for details.</para>
        </listitem>
        <listitem>
          <para><emphasis>Validation matcher library</emphasis> Custom validation matcher implementations are now configured with the <emphasis>validation-matcher-library</emphasis> XML schema components in
            the Spring application context configuration. See <xref linkend="validation-matchers"/> for details.</para>
        </listitem>
        <listitem>
          <para><emphasis>Data dictionary</emphasis> Data dictionaries apply to all messages send and received in test cases. You can define multiple dictionaries using the <emphasis>data-dictionary</emphasis> XML schema components in
            the Spring application context configuration. See <xref linkend="data-dictionary"/> for details.</para>
        </listitem>
        <listitem>
          <para><emphasis>Namespace context</emphasis> Configuration of a global namespace context is necessary for XML message payloads and XPath expressions used in the test cases. The <emphasis>namespace-context</emphasis> XML schema component is used in
            the Spring application context configuration and simplifies the configuration. See <xref linkend="xpath"/> for details.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="history-2-0-before-after-suite">
      <title>Before/after suite components</title>

      <para>When executing test actions before the actual test run you can use the sequence before suite components. We have improved these components to use a special XML schema. This enables easy configuration of both before and after suite actions. In addition
        to that you can bind the suite actions to special packages, test names or suite names. So you can now have more than one sequence before suite at the same time. According to the environment settings the before suite actions are executed or left out.
        Last not least we have done the same improvement to the before test actions and we have introduced a after test sequence component for execution after each test. See how this is done in <xref linkend="testsuite"/>.</para>
    </section>

    <section id="history-2-0-jms-module">
      <title>Citrus JMS module</title>

      <para>JMS support has been a major part of Citrus from the very beginning. Up to now the JMS features were located in <emphasis>citrus-core</emphasis> Maven module. With Citrus 2.0 we introduced a separate <emphasis>citrus-jms</emphasis>
        Maven module. This means that you might have to add proper Maven dependency of this new module in your existing project when using JMS. See how this is done in <xref linkend="jms"/>.</para>
    </section>

</section>