<?xml version="1.0" encoding="UTF-8"?>
<chapter id="message-tracing">
    <title>Tracing incoming/outgoing messages</title>

    <para>As we deal with message based interfaces Citrus will send and receive a lot of messages during a test run. Now we may want to see these messages in 
    chronological order as they were processed by Citrus. We can enable message tracing in Citrus in order to save messages to the file system for further 
    investigations.</para>
    
    <para>Citrus offers an easy way to debug all received messages to the file system. You need to enable some specific loggers and interceptors in the
    Citrus configuration (citrus-context.xml).</para>
    
    <programlisting>&lt;bean class=&quot;com.consol.citrus.report.MessageTracingTestListener&quot;/&gt;</programlisting>
    
    <para>Just add this bean to the Spring configuration and Citrus will listen for sent and received messages for saving those to the file system. You will find files
    like these in the default test-output folder after the test run:</para>
    
    <para>For example:</para>
    <para><literal>logs/trace/messages/MyTest.msgs</literal></para>
    <para><literal>logs/trace/messages/FooTest.msgs</literal></para>
    <para><literal>logs/trace/messages/SomeTest.msgs</literal></para>
    
    <para>Each Citrus test writes a <emphasis>.msgs</emphasis> file containing all messages that went over the wire during the test. By default the debug 
    directory is set to <literal>logs/trace/messages/</literal> relative to the project test output directory. But you can set your own output directory 
    in the configuration</para>
    
    <programlisting>&lt;bean class=&quot;com.consol.citrus.report.MessageTracingTestListener&quot;&gt;
  &lt;property name=&quot;outputDirectory&quot; value=&quot;file:/path/to/folder&quot;/&gt;
&lt;/bean&gt;</programlisting>
    
    <note>
        <para>As the file names do not change with each test run message tracing files may be overwritten. So you eventually need to 
        save the generated message debug files before running another group of test cases.</para>
    </note>
    
    <para>Lets see some sample output for a test case with message communication over SOAP Http:</para>
    
    <programlisting>Sending SOAP request:
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
&lt;SOAP-ENV:Header&gt;
&lt;Operation xmlns=&quot;http://citrusframework.org/test&quot;&gt;sayHello&lt;/Operation&gt;
&lt;/SOAP-ENV:Header&gt;
&lt;SOAP-ENV:Body&gt;
&lt;ns0:HelloRequest xmlns:ns0=&quot;http://www.consol.de/schemas/samples/sayHello.xsd&quot;&gt;
    &lt;ns0:MessageId&gt;0857041782&lt;/ns0:MessageId&gt;
    &lt;ns0:CorrelationId&gt;6915071793&lt;/ns0:CorrelationId&gt;
    &lt;ns0:User&gt;Christoph&lt;/ns0:User&gt;
    &lt;ns0:Text&gt;Hello WebServer&lt;/ns0:Text&gt;
&lt;/ns0:HelloRequest&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;

======================================================================

Received SOAP response:
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
&lt;SOAP-ENV:Header/&gt;
&lt;SOAP-ENV:Body&gt;
&lt;ns0:HelloResponse xmlns:ns0=&quot;http://www.consol.de/schemas/samples/sayHello.xsd&quot;&gt;
    &lt;ns0:MessageId&gt;0857041782&lt;/ns0:MessageId&gt;
    &lt;ns0:CorrelationId&gt;6915071793&lt;/ns0:CorrelationId&gt;
    &lt;ns0:User&gt;WebServer&lt;/ns0:User&gt;
    &lt;ns0:Text&gt;Hello Christoph&lt;/ns0:Text&gt;
&lt;/ns0:HelloResponse&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</programlisting>
    
    <para>For this message tracing to work we need to add logging listeners to our sender and receiver components accordingly.</para>
    
    <programlisting>&lt;citrus-ws:client id=&quot;webServiceClient&quot;
    request-url=&quot;http://localhost:8071&quot;
    message-factory=&quot;messageFactory&quot;
    interceptors=&quot;clientInterceptors&quot;/&gt;
    
    &lt;util:list id=&quot;clientInterceptors&quot;&gt;
        &lt;bean class=&quot;com.consol.citrus.ws.interceptor.LoggingClientInterceptor&quot;/&gt;
    &lt;/util:list&gt;</programlisting>
    
    <important>
        <para>Be aware of adding the Spring <emphasis>util</emphasis> XML namespace to the citrus-context.xml when using the <emphasis>util:list</emphasis> construct.</para>
    </important>
    
</chapter>