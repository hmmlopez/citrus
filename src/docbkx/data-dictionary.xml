<?xml version="1.0" encoding="UTF-8"?>
<chapter id="data-dictionary">
  <title>Data dictionaries</title>

  <para>Data dictionaries in Citrus provide a new way to manipulate message payload data before a message is sent or
  received. The dictionary defines a set of keys and respective values. Just like every other dictionary
  it is used to translate things. In our case we translate message data elements.</para>

  <para>You can translate common message elements that are used widely throughout your domain model. As Citrus deals
  with different types of message data (e.g. XML, JSON) we have different dictionary implementations that are described
  in the next sections.</para>

  <section id="xml-data-dictionary">
    <title>XML data dictionaries</title>

    <para>XML data dictionaries do apply to XML message format payloads, of course. In general we add a dictionary to the basic
    Citrus Spring application context in order to make the dictionary visible to all test cases:</para>

    <programlisting>&lt;citrus:xml-data-dictionary id=&quot;nodeMappingDataDictionary&quot;&gt;
  &lt;citrus:mappings&gt;
    &lt;citrus:mapping path=&quot;TestMessage.MessageId&quot; value=&quot;${messageId}&quot;/&gt;
    &lt;citrus:mapping path=&quot;TestMessage.CorrelationId&quot; value=&quot;${correlationId}&quot;/&gt;
    &lt;citrus:mapping path=&quot;TestMessage.User&quot; value=&quot;Christoph&quot;/&gt;
    &lt;citrus:mapping path=&quot;TestMessage.TimeStamp&quot; value=&quot;citrus:currentDate()&quot;/&gt;
  &lt;/citrus:mappings&gt;
&lt;/citrus:xml-data-dictionary&gt;</programlisting>

    <para>As you can see the dictionary is nothing but a normal Spring bean definition. The <emphasis>NodeMappingDataDictionary</emphasis>
    implementation receives a map of key value pairs where the key is a message element path expression. For XML payloads
    the message element tree is traversed so the path expression is built for an exact message element inside the payload.
    If matched the respective value is set accordingly through the dictionary.</para>

    <para>Besides defining the dictionary key value mappings as property map inside the bean definition we can extract the mapping data
    to an external file.</para>

    <programlisting>&lt;citrus:xml-data-dictionary id=&quot;nodeMappingDataDictionary&quot;&gt;
  &lt;citrus:mapping-file path=&quot;classpath:com/consol/citrus/sample.dictionary&quot;/&gt;
&lt;/citrus:xml-data-dictionary&gt;</programlisting>

    <para>The mapping file content just looks like a normal property file in Java:</para>

    <programlisting>TestMessage.MessageId=${messageId}
TestMessage.CorrelationId=${correlationId}
TestMessage.User=Christoph
TestMessage.TimeStamp=citrus:currentDate()</programlisting>

    <para>You can set any message element value inside the XML message payload. The path expression also supports XML attributes.
    Just use the attribute name as last part of the path expression. Let us have a closer look at a sample XML message payload
    with attributes:</para>

    <programlisting>&lt;TestMessage&gt;
  &lt;User name="Christoph" age="18"/&gt;
&lt;/TestMessage&gt;</programlisting>

    <para>With this sample XML payload given we can access the attributes in the data dictionary as follows:</para>

    <programlisting>&lt;citrus:mapping path=&quot;TestMessage.User.name&quot; value=&quot;${userName}&quot;/&gt;
&lt;citrus:mapping path=&quot;TestMessage.User.age&quot; value=&quot;${userAge}&quot;/&gt;</programlisting>

    <para>The <emphasis>NodeMappingDataDictionary</emphasis> implementation is easy to use and fits the basic needs for
    XML data dictionaries. The message element path expressions are very simple and do fit basic needs. However when more
    complex XML payloads apply for translation we might reach the boundaries here.</para>

    <para>For more complex XML message payloads XPath data dictionaries are very effective:</para>

    <programlisting>&lt;citrus:xpath-data-dictionary id=&quot;xpathMappingDataDictionary&quot;&gt;
  &lt;citrus:mappings&gt;
    &lt;citrus:mapping path=&quot;//TestMessage/MessageId&quot; value=&quot;${messageId}&quot;/&gt;
    &lt;citrus:mapping path=&quot;//TestMessage/CorrelationId&quot; value=&quot;${correlationId}&quot;/&gt;
    &lt;citrus:mapping path=&quot;//TestMessage/User&quot; value=&quot;Christoph&quot;/&gt;
    &lt;citrus:mapping path=&quot;//TestMessage/User/@id&quot; value=&quot;123&quot;/&gt;
    &lt;citrus:mapping path=&quot;//TestMessage/TimeStamp&quot; value=&quot;citrus:currentDate()&quot;/&gt;
  &lt;/citrus:mappings&gt;
&lt;/citrus:xpath-data-dictionary&gt;</programlisting>

    <para>As expected XPath mapping expressions are way more powerful and can also handle very complex scenarios with XML
    namespaces, attributes and node lists. Just like the node mapping dictionary the XPath mapping dictionary does also
    support variables, functions and an external mapping file.</para>

    <para>XPath works fine with namespaces. In general it is good practice to define a namespace context where you map namespace
    URI values with prefix values. So your XPath expression is always exact and evaluation is strict. In Citrus the
    <emphasis>NamespaceContextBuilder</emphasis> which is also added as normal Spring bean to the application context manages
    namespaces used in your XPath expressions. See our XML and XPAth chapters in this documentation for detailed description how
    to accomplish fail safe XPath expressions with namespaces.</para>

    <para>This completes the XML data dictionary usage in Citrus. Later on we will see some more advanced data dictionary scenarios
    where we will discuss the usage of dictionary scopes and mapping strategies. But before that let us have a look at other message
    formats like JSON messages.</para>
  </section>

  <section id="json-data-dictionary">
    <title>JSON data dictionaries</title>

    <para>JSON data dictionaries complement with XML data dictionaries. As usual we have to add the JSON data dictionary to the basic
    Spring application context first. Once this is done the data dictionary automatically applies for all JSON message payloads in Citrus.
    This means that all JSON messages sent and received get translated with the JSON data dictionary implementation.</para>

    <para>Citrus uses message types in order to evaluate which data dictionary may fit to the message that is currently processed.
    As usual you can define the message type directly in your test case as attribute inside the sending and receiving message action.</para>

    <para>Let us see a simple dictionary for JSON data:</para>

    <programlisting>&lt;citrus:json-data-dictionary id=&quot;jsonMappingDataDictionary&quot;&gt;
  &lt;citrus:mappings&gt;
    &lt;citrus:mapping path=&quot;TestMessage.MessageId&quot; value=&quot;${messageId}&quot;/&gt;
    &lt;citrus:mapping path=&quot;TestMessage.CorrelationId&quot; value=&quot;${correlationId}&quot;/&gt;
    &lt;citrus:mapping path=&quot;TestMessage.User&quot; value=&quot;Christoph&quot;/&gt;
    &lt;citrus:mapping path=&quot;TestMessage.TimeStamp&quot; value=&quot;citrus:currentDate()&quot;/&gt;
  &lt;/citrus:mappings&gt;
&lt;/citrus:json-data-dictionary&gt;</programlisting>

    <para>The message path expressions do look very similar to those used in XML data dictionaries. Here the path expression keys do
    apply to the JSON object graph. See the following sample JSON data which perfectly applies to the dictionary expressions above.</para>

    <programlisting>{"TestMessage": {
  "MessageId": "1122334455",
  "CorrelationId": "100000001",
  "User": "Christoph",
  "TimeStamp": 1234567890 }
}</programlisting>

    <para>The path expressions will match a very specific message element inside the JSON object graph. The dictionary will automatically set
    the message element values then. The path expressions are easy to use as you can traverse the JSON object graph very easy.</para>

    <para>Of course the data dictionary does also support test variables, functions. Also very interesting is the usage of JSON arrays.
    A JSON array element is referenced in a data dictionary like this:</para>

    <programlisting>&lt;citrus:mapping path=&quot;TestMessage.Users[0]&quot; value=&quot;Christoph&quot;/&gt;
  &lt;citrus:mapping path=&quot;TestMessage.Users[1]&quot; value=&quot;Julia&quot;/&gt;</programlisting>

    <para>The <emphasis>Users</emphasis> element is a JSON array, so we can access the elements with index. Nesting JSON objects and arrays
    is also supported so you can also handle more complex JSON data.</para>
  </section>

  <section id="data-dictionary-scope">
    <title>Dictionary scopes</title>

    <para>Now that we have learned how to add data dictionaries to Citrus we need to discuss some advanced topics. Data
    dictionary scopes do define the boundaries where the dictionary may apply. By default data dictionaries are global scope dictionaries.
    This means that the data dictionary applies to all messages sent and received with Citrus. Of course message types are considered
    so XML data dictionaries do only apply to XML message types. However global scope dictionaries will be activated throughout all test
    cases and actions.</para>

    <para>You can overwrite the dictionary scope. For instance in order to use an explicit scope. When this is done the dictionary wil not apply
    automatically but the user has to explicitly set the data dictionary in sending or receiving test action. This way you can activate
    the dictionary to a very special set of test actions.</para>

    <programlisting>&lt;citrus:xml-data-dictionary id=&quot;specialDataDictionary&quot; global-scope=&quot;false&quot;&gt;
  &lt;citrus:mapping-file path=&quot;classpath:com/consol/citrus/sample.dictionary&quot;/&gt;
&lt;/citrus:xml-data-dictionary&gt;</programlisting>

    <para>We set the global scope property to <emphasis>false</emphasis> so the dictionary is handled in explicit scope. This means that
    you have to set the data dictionary explicitly in your test actions:</para>

    <programlisting>&lt;send endpoint=&quot;myEndpoint&quot;&gt;
  &lt;message data-dictionary=&quot;specialDataDictionary&quot;&gt;
    &lt;payload&gt;
      &lt;TestMessage&gt;Hello Citrus&quot;/TestMessage&gt;
    &lt;/payload&gt;
  &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para>The sample above is a sending test action with an explicit data dictionary reference set. Before sending the message the dictionary is asked
    for translation. So all matching message element values will be set by the dictionary accordingly. Other global data dictionaries do also apply for this message
    but the explicit dictionary will always overwrite the message element values.</para>
  </section>

  <section id="data-dictonary-mapping-strategy">
    <title>Path mapping strategies</title>

    <para>Another advanced topic about data dictionaries is the path mapping strategy. When using simple path expressions the default strategy
    is always <emphasis>EXACT_MATCH</emphasis>. This means that the path expression has to evaluate exactly to a message element within the
    payload data. And only this exact message element is translated.</para>

    <para>You can set your own path mapping strategy in order to change this behavior. For instance another mapping strategy would be <emphasis>STARS_WITH</emphasis>.
    All elements are translated that start with a certain path expression. Let us clarify this with an example:</para>

    <programlisting>&lt;citrus:xml-data-dictionary id=&quot;nodeMappingDataDictionary&quot; mapping-strategy=&quot;STARTS_WITH&quot;&gt;
  &lt;citrus:mappings&gt;
    &lt;citrus:mapping path=&quot;TestMessage.Property&quot; value=&quot;citrus:randomString()&quot;/&gt;
  &lt;/citrus:mappings&gt;
&lt;/citrus:xml-data-dictionary&gt;</programlisting>

    <para>Now with the path mapping strategy set to <emphasis>STARS_WITH</emphasis> all message element path expressions starting with <emphasis>TestMessage.Property</emphasis> will
    find translation in this dictionary. Following sample message payload would be translated accordingly:</para>

    <programlisting>&lt;TestMessage&gt;
    &lt;Property&gt;XXX&lt;/Property&gt;
    &lt;PropertyName&gt;XXX&lt;/PropertyName&gt;
    &lt;PropertyValue&gt;XXX&lt;/PropertyValue&gt;
  &lt;/TestMessage&gt;</programlisting>

    <para>All child elements of <emphasis>TestMessage</emphasis> starting with <emphasis>Property</emphasis> will be translated with this data dictionary. In the resulting message payload
    Citrus will use a random string as value for these elements as we used the <emphasis>citrus:randomString()</emphasis> function in the dictionary mapping.</para>

    <para>The next mapping strategy would be <emphasis>ENDS_WITH</emphasis>. No surprises here - this mapping strategy looks for message
    elements that end with a certain path expression. Again a simple example will clarify this for you.</para>

    <programlisting>&lt;citrus:xml-data-dictionary id=&quot;nodeMappingDataDictionary&quot; mapping-strategy=&quot;ENDS_WITH&quot;&gt;
  &lt;citrus:mappings&gt;
    &lt;citrus:mapping path=&quot;Id&quot; value=&quot;citrus:randomNumber()&quot;/&gt;
  &lt;/citrus:mappings&gt;
&lt;/citrus:xml-data-dictionary&gt;</programlisting>

    <para>Again let us see some sample message payload for this dictionary usage:</para>

    <programlisting>&lt;TestMessage&gt;
  &lt;RequestId&gt;XXX&lt;/RequestId&gt;
  &lt;Properties&gt;
    &lt;Property&gt;
      &lt;PropertyId&gt;XXX&lt;/PropertyId&gt;
      &lt;PropertyValue&gt;XXX&lt;/PropertyValue&gt;
    &lt;/Property&gt;
    &lt;Property&gt;
      &lt;PropertyId&gt;XXX&lt;/PropertyId&gt;
      &lt;PropertyValue&gt;XXX&lt;/PropertyValue&gt;
    &lt;/Property&gt;
  &lt;/Properties&gt;
  &lt;/TestMessage&gt;</programlisting>

    <para>In this sample all message elements ending with <emphasis>Id</emphasis> would be translated with a random number. No matter where in the message tree the elements are located. This
    is quite useful but also very powerful. So be careful to use this strategy in global data dictionaries as it may translate message elements that you would not expect in the first place.</para>
  </section>

</chapter>