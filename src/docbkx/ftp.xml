<?xml version="1.0" encoding="UTF-8"?>
<chapter id="ftp">
  <title>FTP support</title>

  <para>Citrus is able to start a little ftp server accepting incoming client requests. Also Citrus is able to call FTP commands as a client. The next sections deal with
  FTP connectivity.</para>

  <note>
    <para>The FTP components in Citrus are kept in a separate Maven module. So you should add the module
      as Maven dependency to your project accordingly.</para>

    <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.consol.citrus&lt;/groupId&gt;
  &lt;artifactId&gt;citrus-ftp&lt;/artifactId&gt;
  &lt;version&gt;2.4-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</programlisting>

    <para>As Citrus provides a customized FTP configuration schema for the Spring application context configuration files we have to add name to the top level
      <emphasis>beans</emphasis> element. Simply include the ftp-config namespace in the configuration XML files as follows.</para>

    <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:citrus=&quot;http://www.citrusframework.org/schema/config&quot;
    xmlns:citrus-ftp=&quot;http://www.citrusframework.org/schema/ftp/config&quot;
    xsi:schemaLocation=&quot;
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.citrusframework.org/schema/config
    http://www.citrusframework.org/schema/config/citrus-config.xsd
    http://www.citrusframework.org/schema/http/config
    http://www.citrusframework.org/schema/ftp/config/citrus-ftp-config.xsd&quot;&gt;

      [...]

      &lt;/beans&gt;</programlisting>

    <para>Now we are ready to use the customized Citrus FTP configuration elements with the
      citrus-ftp namespace prefix.</para>
  </note>

  <section id="ftp-client">
    <title>FTP client</title>

    <para>We want to use Citrus fo connect to dome FTP server as a client sending commands such as creating a directory or listing all files. Citrus
      offers a client component doing exactly this FTP client connection.</para>

    <programlisting>&lt;citrus-ftp:client id=&quot;ftpClient&quot;
      host=&quot;localhost&quot;
      port=&quot;22222&quot;
      username=&quot;admin&quot;
      password=&quot;admin&quot;
      timeout=&quot;10000&quot;/&gt;</programlisting>

    <para>The configuration above describes a Citrus ftp client connected to a ftp server with <emphasis>ftp://localhost:22222</emphasis>. For authentication username and
    password are defined as well as the global connection timeout. The client will automatically send username and password for proper authentication to the server when opening a new connection.</para>

    <para>In a test case you are now able to use the client to push commands to the server.</para>

    <programlisting>&lt;send endpoint=&quot;ftpClient&quot; fork=&quot;true&quot;&gt;
  &lt;message&gt;
    &lt;data&gt;&lt;/data&gt;
  &lt;/message&gt;
  &lt;header&gt;
    &lt;element name=&quot;citrus_ftp_command&quot; value=&quot;PWD&quot;/&gt;
    &lt;element name=&quot;citrus_ftp_arguments&quot; value=&quot;test&quot;/&gt;
  &lt;/header&gt;
&lt;/send&gt;

&lt;receive endpoint=&quot;ftpClient&quot;&gt;
  &lt;message type=&quot;plaintext&quot;&gt;
    &lt;data&gt;PWD&lt;/data&gt;
  &lt;/message&gt;
  &lt;header&gt;
    &lt;element name=&quot;citrus_ftp_command&quot; value=&quot;PWD&quot;/&gt;
    &lt;element name=&quot;citrus_ftp_arguments&quot; value=&quot;test&quot;/&gt;
    &lt;element name=&quot;citrus_ftp_reply_code&quot; value=&quot;257&quot;/&gt;
    &lt;element name=&quot;citrus_ftp_reply_string&quot; value=&quot;@contains('is current directory')@&quot;/&gt;
  &lt;/header&gt;
&lt;/receive&gt;</programlisting>

    <para>As you can see most of the ftp communication parameters are specified as special header elements in the message. Citrus automatically converts those information to proper FTP commands and response messages.</para>
  </section>

  <section id="ftp-server">
    <title>FTP server</title>

    <para>Now that we are able to access FTP as a client we might also want to simulate the server side. Therefore Citrus offers a server component that is listening on a port for incoming FTP connections. The server has a default
    home directory on the local file system specified. But you can also define home directories per user. For now let us have a look at the server configuration component:</para>

    <programlisting>&lt;citrus-ftp:server id=&quot;ftpServer&quot;&gt;
      port=&quot;22222&quot;
      auto-start=&quot;true&quot;
      user-manager-properties=&quot;classpath:ftp.server.properties&quot;/&gt;</programlisting>

    <para>The ftp server configuration is quite simple. The server starts automatically and binds to a port. The user configuration is read from a <emphasis>user-manager-property</emphasis> file. Let us have a look at the content of
    this user management file:</para>

    <programlisting># Password is &quot;admin&quot;
ftpserver.user.admin.userpassword=21232F297A57A5A743894A0E4A801FC3
ftpserver.user.admin.homedirectory=target/ftp/user/admin
ftpserver.user.admin.enableflag=true
ftpserver.user.admin.writepermission=true
ftpserver.user.admin.maxloginnumber=0
ftpserver.user.admin.maxloginperip=0
ftpserver.user.admin.idletime=0
ftpserver.user.admin.uploadrate=0
ftpserver.user.admin.downloadrate=0

ftpserver.user.anonymous.userpassword=
ftpserver.user.anonymous.homedirectory=target/ftp/user/anonymous
ftpserver.user.anonymous.enableflag=true
ftpserver.user.anonymous.writepermission=false
ftpserver.user.anonymous.maxloginnumber=20
ftpserver.user.anonymous.maxloginperip=2
ftpserver.user.anonymous.idletime=300
ftpserver.user.anonymous.uploadrate=4800
ftpserver.user.anonymous.downloadrate=4800</programlisting>

    <para>As you can see you are able to define as many user for the ftp server as you like. Username and password define the authentication on the server. In addition to that you have plenty of configuration possibilities per user. Citrus uses the
    Apache ftp server implementation. So for more details on configuration capabilities please consult the official Apache ftp server documentation.</para>

    <para>Now we would like to use the server in a test case. Very easy you just have to define a receive message action within your test case that uses the server id as endpoint reference:</para>

    <programlisting>&lt;echo&gt;
  &lt;message&gt;Receive user login on FTP server&lt;/message&gt;
&lt;/echo&gt;

&lt;receive endpoint=&quot;ftpServer&quot;&gt;
  &lt;message type=&quot;plaintext&quot;&gt;
    &lt;data&gt;USER&lt;/data&gt;
  &lt;/message&gt;
  &lt;header&gt;
    &lt;element name=&quot;citrus_ftp_command&quot; value=&quot;USER&quot;/&gt;
    &lt;element name=&quot;citrus_ftp_arguments&quot; value=&quot;admin&quot;/&gt;
  &lt;/header&gt;
&lt;/receive&gt;

&lt;send endpoint=&quot;ftpServer&quot;&gt;
  &lt;message type=&quot;plaintext&quot;&gt;
    &lt;data&gt;OK&lt;/data&gt;
  &lt;/message&gt;
&lt;/send&gt;

&lt;echo&gt;
  &lt;message&gt;Receive user password on FTP server&lt;/message&gt;
&lt;/echo&gt;

&lt;receive endpoint=&quot;ftpServer&quot;&gt;
  &lt;message type=&quot;plaintext&quot;&gt;
    &lt;data&gt;PASS&lt;/data&gt;
  &lt;/message&gt;
  &lt;header&gt;
    &lt;element name=&quot;citrus_ftp_command&quot; value=&quot;PASS&quot;/&gt;
    &lt;element name=&quot;citrus_ftp_arguments&quot; value=&quot;admin&quot;/&gt;
  &lt;/header&gt;
&lt;/receive&gt;

&lt;send endpoint=&quot;ftpServer&quot;&gt;
  &lt;message type=&quot;plaintext&quot;&quot;&gt;
    &lt;data&gt;OK&lt;/data&gt;
  &lt;/message&gt;
&lt;/send&gt;</programlisting>

    <para>The listing above shows two incoming commands representing a user login. We indicate with re send actions that we would link the server to respond with positive feedback and to accept the login. As we have a fully qualified ftp server
    running the client can also push files read directories and more. All incoming commands can be validated inside a test case.</para>
  </section>
</chapter>