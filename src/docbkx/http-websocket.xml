<?xml version="1.0" encoding="UTF-8"?>
<chapter id="http-websocket">
    <title>WebSocket support</title>

    <para>The WebSocket message protocol builds on top of Http standard and brings bidirectional communication to the Http client-server world. Citrus is able to send and receive messages with WebSocket connections as client and server. The Http server
      implementation is now able to define multiple WebSocket endpoints. The new Citrus WebSocket client is able to publish and consumer messages via bidirectional WebSocket protocol.</para>

    <para>The new WebSocket support is located in the module <emphasis>citrus-websocket</emphasis>. Therefore we need to add this module to our project as dependency when we are about to use the WebSocket features in Citrus.</para>

    <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;com.consol.citrus&lt;/groupId&gt;
    &lt;artifactId&gt;citrus-websocket&lt;/artifactId&gt;
    &lt;version&gt;2.7-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</programlisting>

    <para>As Citrus provides a customized WebSocket configuration schema for the Spring application context configuration files we have to add name to the top level
      <emphasis>beans</emphasis> element. Simply include the websocket-config namespace in the configuration XML files as follows.</para>

    <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
      xmlns:citrus=&quot;http://www.citrusframework.org/schema/config&quot;
      xmlns:citrus-websocket=&quot;http://www.citrusframework.org/schema/websocket/config&quot;
      xsi:schemaLocation=&quot;
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.citrusframework.org/schema/config
            http://www.citrusframework.org/schema/config/citrus-config.xsd
            http://www.citrusframework.org/schema/websocket/config
            http://www.citrusframework.org/schema/websocket/config/citrus-websocket-config.xsd&quot;&gt;

    [...]

&lt;/beans&gt;</programlisting>

    <para>Now our project is ready to use the Citrus WebSocket support. First of all let us send a message via WebSocket connection to some server.</para>

    <section id="http-websocket-client">
      <title>WebSocket client</title>

      <para>On the client side Citrus offers a client component that goes directly to the Spring bean application context. The client needs a server endpoint uri. This is a WebSocket protocol endpoint uri.</para>

      <programlisting>&lt;citrus-websocket:client id=&quot;helloWebSocketClient&quot;
    url=&quot;http://localhost:8080/hello&quot;
    timeout=&quot;5000&quot;/&gt;</programlisting>

      <para>The <emphasis>url</emphasis> defines the endpoint to send messages to. The server has to be a WebSocket ready web server that supports Http connection upgrade for WebSocket protocols. WebSocket by its nature is
        an asynchronous bidirectional protocol. This means that the connection between client and server remains open and both server and client can send and receive messages. So when the Citrus client is waiting for a message
        we need a timeout that stops the asynchronous waiting. The receiving test action and the test case will fail when such a timeout is raised.</para>

      <para>The WebSocket client will automatically open a connection to the server and ask for a connection upgrade to WebSocket protocol. This handshake is done once when the connection to the server is established. After that
        the client can push messages to the server and on the other side the server can push messages to the client. Now lets first push some messages to the server:</para>

      <programlisting>&lt;send endpoint=&quot;helloWebSocketClient&quot;&gt;
  &lt;message&gt;
      &lt;payload&gt;
          &lt;TestMessage&gt;
              &lt;Text&gt;Hello WebSocketServer&lt;/Text&gt;
          &lt;/TestMessage&gt;
      &lt;/payload&gt;
  &lt;/message&gt;
&lt;/send&gt;</programlisting>

      <para>The connection handshake and the connection upgrade is done automatically by the client. After that the message is pushed to the server. As WebSocket is a bidirectional protocol we can also receive messages on the WebSocket
      client. These messages are pushed from server to all connected clients.</para>

      <programlisting>&lt;receive endpoint=&quot;helloWebSocketClient&quot;&gt;
  &lt;message&gt;
      &lt;payload&gt;
          &lt;TestMessage&gt;
              &lt;Text&gt;Hello WebSocketClient&lt;/Text&gt;
          &lt;/TestMessage&gt;
      &lt;/payload&gt;
  &lt;/message&gt;
&lt;/receive&gt;</programlisting>

      <para>We just use the very same client endpoint component in a message receive action. The client will wait for messages from the server and once received perform the well known message validation. Here we expect some XML message payload.
      This completes the client side as we are able to push and consumer messages via WebSocket connections.</para>

      <tip><para>Up to now we have used static WebSocket endpoint URIs in our client component configurations. This can be done with a more powerful dynamic endpoint URI in WebSocket client. Similar to the endpoint resolving mechanism
        in SOAP you can dynamically set the called endpoint uri at test runtime through message header values. By default Citrus will check a specific header entry for dynamic endpoint URI which is simply defined for each message sending action
        inside the test.</para>

        <para>The <emphasis>dynamicEndpointResolver</emphasis> bean must implement the EndpointUriResolver interface in order to resolve
          dynamic endpoint uri values. Citrus offers a default implementation, the <emphasis>DynamicEndpointUriResolver</emphasis>, which
          uses a specific message header for setting dynamic endpoint uri. The message header needs to specify the header
          <emphasis>citrus_endpoint_uri</emphasis> with a valid request uri.</para>

        <programlisting>&lt;header&gt;
          &lt;element name=&quot;citrus_endpoint_uri&quot; value=&quot;ws://localhost:8080/customers/${customerId}&quot;/&gt;
          &lt;/header&gt;</programlisting>

        <para>The specific send action above will send its message to the dynamic endpoint (ws://localhost:8080/customers/${customerId}) which is set in the header <emphasis>citrus_endpoint_uri</emphasis>.</para>
      </tip>
    </section>

    <section id="http-websocket-server">
      <title>WebSocket server endpoints</title>

      <para>On the server side Citrus has a Http server implementation that we can easily start during test runtime. The Http server accepts connections from clients and also supports WebSocket upgrade strategies. This means clients
      can ask for a upgrade to the WebSocket standard. In this handshake the server will upgrade the connection to WebSocket and afterwards client and server can exchange messages over this connection. This means the connection is kept alive
      and multiple messages can be exchanged. Lets see how WebSocket endpoints are added to a Http server component in Citrus.</para>

      <programlisting>&lt;citrus-websocket:server id=&quot;helloHttpServer&quot;
        port=&quot;8080&quot;
        auto-start=&quot;true&quot;
        resource-base=&quot;src/it/resources&quot;&gt;
    &lt;citrus-websocket:endpoints&gt;
        &lt;citrus-websocket:endpoint ref=&quot;websocket1&quot;/&gt;
        &lt;citrus-websocket:endpoint ref=&quot;websocket2&quot;/&gt;
    &lt;/citrus-websocket:endpoints&gt;
&lt;/citrus-websocket:server&gt;

&lt;citrus-websocket:endpoint id=&quot;websocket1&quot; path=&quot;/test1&quot;/&gt;
&lt;citrus-websocket:endpoint id=&quot;websocket2&quot; path=&quot;/test2&quot; timeout=&quot;10000&quot;/&gt;</programlisting>

      <para>The embedded Jetty WebSocket server component in Citrus now is able to define multiple WebSocket endpoints. The WebSocket endpoints match to a request path on the server and are referenced by a unique id. Each WebSocket endpoint
      can follow individual timeout settings. In a test we can use these endpoints directly to receive messages.</para>

      <programlisting>&lt;testcase name=&quot;httpWebSocketServerTest&quot;&gt;
    &lt;actions&gt;
        &lt;receive endpoint=&quot;websocket1&quot;&gt;
            &lt;message&gt;
                &lt;data&gt;
                  [...]
                &lt;/data&gt;
            &lt;/message&gt;
        &lt;/receive&gt;

        &lt;send endpoint=&quot;websocket1&quot;&gt;
            &lt;message&gt;
                &lt;data&gt;
                  [...]
                &lt;/data&gt;
            &lt;/message&gt;
        &lt;/send&gt;
    &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>

      <para>As you can see we reference the endpoint id in both receive and send actions. Each WebSocket endpoint holds one or more open connections to its clients. Each message that is sent is pushed to all connected clients. Each client can send
        messages to the WebSocket endpoint.</para>

      <para>The WebSocket endpoint component handles connection handshakes automatically and caches all open sessions in memory. By default all connected clients will receive the messages pushed from server. This is done completely behind the scenes.
        The Citrus server is able to handle multiple WebSocket endpoints with different clients connected to it at the same time. This is why we have to choose the WebSocket endpoint on the server by its identifier when sending and receiving messages.</para>

      <para>With this WebSocket endpoints we change the Citrus server behavior so that clients can upgrade to WebSocket connection. Now we have a bidirectional connection where the server can push messages to the client and vice versa.</para>
    </section>

    <section id="http-websocket-headers">
      <title>WebSocket headers</title>

      <para>The WebSocket standard defines some default headers to use during connection upgrade. These headers are made available to the test case in both directions. Citrus will handle these header values with special care when WebSocket support is activated on a
      server or client. Now WebSocket messages can also be split into multiple pieces. Each message part is pushed separately to the server but still is considered to be a single message payload. The server has to collect and aggregate all messages until a special
      message header <emphasis>isLast</emphasis> is set in one of the message parts.</para>

      <para>The Citrus WebSocket client can slice messages into several parts.</para>

      <programlisting>&lt;send endpoint=&quot;webSocketClient&quot;&gt;
    &lt;message type=&quot;json&quot;&gt;
        &lt;data&gt;
        [
            {
                &quot;event&quot; : &quot;client_message_1&quot;,
                &quot;timestamp&quot; : &quot;citrus:currentDate()&quot;
            },
        &lt;/data&gt;
    &lt;/message&gt;
    &lt;header&gt;
        &lt;element name=&quot;citrus_websocket_is_last&quot; value=&quot;false&quot;/&gt;
    &lt;/header&gt;
&lt;/send&gt;

&lt;sleep milliseconds=&quot;500&quot;/&gt;

&lt;send endpoint=&quot;webSocketClient&quot;&gt;
    &lt;message type=&quot;json&quot;&gt;
        &lt;data&gt;
            {
                &quot;event&quot; : &quot;client_message_2&quot;,
                &quot;timestamp&quot; : &quot;citrus:currentDate()&quot;
            }
          ]
        &lt;/data&gt;
    &lt;/message&gt;
    &lt;header&gt;
        &lt;element name=&quot;citrus_websocket_is_last&quot; value=&quot;true&quot;/&gt;
    &lt;/header&gt;
&lt;/send&gt;</programlisting>

      <para>The test above has two separate send operations both sending to a WebSocket endpoint. The first sending action sets the header <emphasis>citrus_websocket_is_last</emphasis> to <emphasis>false</emphasis> which indicates that the message is not complete yet.
      The 2nd send action pushes the rest of the message to the server and set the <emphasis>citrus_websocket_is_last</emphasis> header to <emphasis>true</emphasis>. Now the server is able to aggregate the message pieces to a single message payload. The result is
      a valida JSON array with both events in it.</para>

      <programlisting>[
  {
    &quot;event&quot; : &quot;client_message_1&quot;,
    &quot;timestamp&quot; : &quot;2015-01-01&quot;
  },
  {
    &quot;event&quot; : &quot;client_message_2&quot;,
    &quot;timestamp&quot; : &quot;2015-01-01&quot;
  }
]</programlisting>

      <para>Now the server part in Citrus is able to handle these sliced messages, too. The server will automatically aggregate those message parts before passing it to the test case for validation.</para>

    </section>
</chapter>
