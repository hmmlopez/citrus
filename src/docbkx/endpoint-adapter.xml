<?xml version="1.0" encoding="UTF-8"?>
<chapter id="endpoint-adapter">
  <title>Endpoint adapter</title>

  <para>Endpoint adapter help to customize the behavior of a Citrus server such as HTTP or SOAP web servers. As the servers get started with the Citrus context
  they are ready to receive incoming client requests. Now there are different ways to process these incoming requests and to provide a proper response message. By default
  the server will forward the incoming request to a in memory message channel where a test can receive the message and provide a synchronous response. This message channel
  handling is done automatically behind the scenes so the tester does not care about these things. The tester just uses the server directly as endpoint reference in the test case.
  This is the default behaviour. In addition to that you can define custom endpoint adapters on the Citrus server in order to change this default behavior.</para>

  <para>You set the custom endpoint adapter directly on the server configuration as follows:</para>

  <programlisting>&lt;citrus-http:server id=&quot;helloHttpServer&quot;
    port=&quot;8080&quot;
    auto-start=&quot;true&quot;
    endpoint-adapter=&quot;emptyResponseEndpointAdapter&quot;
    resource-base=&quot;src/it/resources&quot;/&gt;

    &lt;citrus:empty-response-adapter id=&quot;emptyResponseEndpointAdapter&quot;/&gt;</programlisting>

  <para>Now let us have a closer look at the provided endpoint adapter implementations.</para>

  <section id="endpoint-adapter-empty">
    <title>Empty response endpoint adapter</title>

    <para>This is the simplest endpoint adapter you can think of. It simply provides an empty success response using the HTTP
      response code <emphasis>200</emphasis>. The adapter does not need any configurations or properties as it simply responds with an empty HTTP response.</para>

    <programlisting>&lt;citrus:empty-response-adapter id=&quot;emptyResponseEndpointAdapter&quot;/&gt;</programlisting>
  </section>

  <section id="endpoint-adapter-static">
    <title>Static response endpoint adapter</title>

    <para>The next more complex endpoint adapter will always return a static response message.</para>

    <programlisting>&lt;citrus:static-response-adapter id=&quot;endpointAdapter&quot;&gt;
    &lt;citrus:payload&gt;
        &lt;![CDATA[
          &lt;HelloResponse
            xmlns=&quot;http://www.consol.de/schemas/samples/sayHello.xsd&quot;&gt;
              &lt;MessageId&gt;123456789&lt;/MessageId&gt;
              &lt;CorrelationId&gt;Cx1x123456789&lt;/CorrelationId&gt;
              &lt;Text&gt;Hello User&lt;/Text&gt;
          &lt;/HelloResponse&gt;
        ]]&gt;
    &lt;/citrus:payload&gt;
    &lt;citrus:header&gt;
        &lt;citrus:element name=&quot;{http://www.consol.de/schemas/samples}h1:Operation&quot;
                  value=&quot;sayHello&quot;/&gt;
        &lt;citrus:element name=&quot;{http://www.consol.de/schemas/samples}h1:MessageId&quot;
                  value=&quot;123456789&quot;/&gt;
    &lt;/citrus:header&gt;
 &lt;/citrus:static-response-adapter&gt;</programlisting>

    <para>The endpoint adapter is configured with a static message payload and static response header values. The response to the client
      is therefore always the same.</para>
  </section>

  <section id="endpoint-adapter-dispatcher">
    <title>Request dispatching endpoint adapter</title>

    <para>The idea behind the request dispatching endpoint adapter is that the incoming requests are dispatched to several other
      endpoint adapters. The decision which endpoint adapter should handle the actual request is done depending on some adapter mapping.
      The mapping is done based on the payload or header data of the incoming request. A mapping strategy evaluates a mapping key using the
      incoming request. You can think of an XPath expression that evaluates to the mapping key for instance. The endpoint adapter that maps
      to the mapping key is then called to handle the request.</para>

    <para>So the request dispatching endpoint adapter is able to dynamically call several other endpoint adapters based on the incoming request
      message at runtime. This is very powerful. The next example uses the request dispatching endpoint adapter with a XPath mapping key extractor.</para>

    <programlisting>&lt;citrus:dispatching-endpoint-adapter id=&quot;dispatchingEndpointAdapter&quot;
         mapping-key-extractor=&quot;mappingKeyExtractor&quot;
         mapping-strategy=&quot;mappingStrategy&quot;/>

&lt;bean id=&quot;mappingStrategy&quot;
  class=&quot;com.consol.citrus.endpoint.adapter.mapping.SimpleMappingStrategy&quot;&gt;
    &lt;property name=&quot;adapterMappings&quot;&gt;
      &lt;map&gt;
          &lt;entry key=&quot;sayHello&quot; ref=&quot;helloEndpointAdapter&quot;/&gt;
      &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;mappingKeyExtractor&quot;
  class=&quot;com.consol.citrus.endpoint.adapter.mapping.XPathPayloadMappingKeyExtractor&quot;&gt;
    &lt;property name=&quot;xpathExpression&quot; value=&quot;//TestMessage/Operation/*&quot;/&gt;
&lt;/bean&gt;

&lt;citrus:static-response-adapter id=&quot;helloEndpointAdapter&quot;&gt;
    &lt;citrus:payload&gt;
        &lt;![CDATA[
            &lt;HelloResponse
                xmlns=&quot;http://www.consol.de/schemas/samples/sayHello.xsd&quot;&gt;
                &lt;MessageId&gt;123456789&lt;/MessageId&gt;
                &lt;Text&gt;Hello User&lt;/Text&gt;
            &lt;/HelloResponse&gt;
        ]]&gt;
    &lt;/citrus:payload&gt;
&lt;/citrus:static-response-adapter&gt;</programlisting>

    <para>The XPath mapping key extractor expression decides for each request which mapping key to use in order to find a proper endpoint adapter through the mapping strategy. The endpoint adapters available in the
      application context are mapped via their bean id. For instance an incoming request with a matching element <literal>//TestMessage/Operation/sayHello</literal> would be handled by the endpoint
      adapter bean that is registered in the mapping strategy as "sayHello" key. The available endpoint adapters are configured in the same Spring application context.</para>

    <para>Citrus provides several default mapping key extractor implementations.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>HeaderMappingKeyExtractor</emphasis>: Reads a special header entry and uses its value as mapping key</para>
      </listitem>
      <listitem>
        <para><emphasis>SoapActionMappingKeyExtractor</emphasis>: Uses the soap action header entry as mapping key</para>
      </listitem>
      <listitem>
        <para><emphasis>XPathPayloadMappingKeyExtractor</emphasis>: Evaluates a XPath expression on the request payload and uses the result as mapping key</para>
      </listitem>
    </itemizedlist>

    <para>In addition to that we need a mapping strategy. Citrus provides following default implementations.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>SimpleMappingStrategy</emphasis>: Simple key value map with endpoint adapter references</para>
      </listitem>
      <listitem>
        <para><emphasis>BeanNameMappingStrategy</emphasis>: Loads the endpoint adapter Spring bean with the given id matching the mapping key</para>
      </listitem>
      <listitem>
        <para><emphasis>ContextLoadingMappingStrategy</emphasis>: Same as BeanNameMappingStrategy but loads a separate application context defined by external file resource</para>
      </listitem>
    </itemizedlist>

  </section>

  <section id="endpoint-adapter-channel">
    <title>Channel endpoint adapter</title>

    <para>The channel connecting endpoint adapter is the default adapter used in all Citrus server components. Indeed this adapter also provides the most
      flexibility. This adapter forwards incoming requests to a channel destination. The adapter is waiting for a proper response on a reply destination synchronously.
      With the channel endpoint components you can read the requests on the channel and provide a proper response on the reply destination.</para>

    <programlisting>&lt;citrus:channel-endpoint-adapter id=&quot;channelEndpointAdapter&quot;
              channel-name=&quot;inbound.channel&quot;
              timeout=&quot;2500&quot;/&gt;</programlisting>
  </section>

  <section id="endpoint-adapter-jms">
    <title>JMS endpoint adapter</title>

    <para>Another powerful endpoint adapter is the JMS connecting adapter implementation. This adapter forwards incoming requests to a JMS destination and waits for a proper response on a reply destination.
      A JMS endpoint can access the requests internally and provide a proper response on the reply destination. So this adapter is very flexible to provide proper response messages.</para>

    <para>This special adapter comes with the <emphasis>citrus-jms</emphasis> module. So you have to add the module and the special XML namespace for this module to your configuration files. The Maven module
    for <emphasis>citrus-jms</emphasis> goes to the Maven POM file as normal project dependency. The <emphasis>citrus-jms</emphasis> namespace goes to the Spring bean XML configuration file as follows:</para>

    <note>
      <para>Citrus provides a "citrus-jms" configuration namespace and schema definition for JMS related components and features. Include this namespace into your Spring
        configuration in order to use the Citrus JMS configuration elements. The namespace URI and schema location are added to the
        Spring configuration XML file as follows.</para>

      <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:citrus-jms=&quot;http://www.citrusframework.org/schema/jms/config&quot;
        xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.citrusframework.org/schema/jms/config
        http://www.citrusframework.org/schema/jms/config/citrus-jms-config.xsd&quot;&gt;

    [...]

&lt;/beans&gt;</programlisting>

      <para>After that you are able to use the adapter implementation in the Spring bean configuration.</para>
    </note>

    <programlisting>&lt;citrus-jms:endpoint-adapter id=&quot;jmsEndpointAdapter&quot;
              destination-name=&quot;JMS.Queue.Requests.In&quot;
              reply-destination-name=&quot;JMS.Queue.Response.Out&quot;
              connection-factory=&quot;jmsConnectionFactory&quot;
              timeout=&quot;2500&quot;/&gt;

&lt;bean id="jmsConnectionFactory" class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt;
      &lt;property name=&quot;brokerURL&quot; value=&quot;tcp://localhost:61616&quot; /&gt;
&lt;/bean&gt;</programlisting>
  </section>

</chapter>