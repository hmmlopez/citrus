<?xml version="1.0" encoding="UTF-8"?>
<section id="actions-input">
    <title>Input</title>

    <para>During the test case execution it is possible to read some user input from the command line. The test execution will 
    stop and wait for keyboard inputs over the standard input stream. The user has to type the input and end it with the return 
    key.</para>
    
    <para>The user input is stored to the respective variable value.</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;testcase name=&quot;inputTest&quot;&gt;
    &lt;variables&gt;
        &lt;variable name=&quot;userinput&quot; value=&quot;&quot;&gt;&lt;/variable&gt;
        &lt;variable name=&quot;userinput1&quot; value=&quot;&quot;&gt;&lt;/variable&gt;
        &lt;variable name=&quot;userinput2&quot; value=&quot;y&quot;&gt;&lt;/variable&gt;
        &lt;variable name=&quot;userinput3&quot; value=&quot;yes&quot;&gt;&lt;/variable&gt;
        &lt;variable name=&quot;userinput4&quot; value=&quot;&quot;&gt;&lt;/variable&gt;
    &lt;/variables&gt;
    &lt;actions&gt;
        &lt;input/&gt;
        &lt;echo&gt;&lt;message&gt;user input was: ${userinput}&lt;/message&gt;&lt;/echo&gt;
        
        &lt;input message=&quot;Now press enter:&quot; variable=&quot;userinput1&quot;/&gt;
        &lt;echo&gt;&lt;message&gt;user input was: ${userinput1}&lt;/message&gt;&lt;/echo&gt;
        
        &lt;input message=&quot;Do you want to continue?&quot; 
                  valid-answers=&quot;y/n&quot; variable=&quot;userinput2&quot;/&gt;
        &lt;echo&gt;&lt;message&gt;user input was: ${userinput2}&lt;/message&gt;&lt;/echo&gt;
        
        &lt;input message=&quot;Do you want to continue?&quot; 
                  valid-answers=&quot;yes/no&quot; variable=&quot;userinput3&quot;/&gt;
        &lt;echo&gt;&lt;message&gt;user input was: ${userinput3}&lt;/message&gt;&lt;/echo&gt;
        
        &lt;input variable=&quot;userinput4&quot;/&gt;
        &lt;echo&gt;&lt;message&gt;user input was: ${userinput4}&lt;/message&gt;&lt;/echo&gt;
    &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>
    
    <para>As you can see the input action is customizable with a prompt message that is displayed to the user and some valid answer possibilities.
    The user input is stored to a test variable for further use in the test case. In detail the input action offers following attributes:</para>
    
    <itemizedlist mark="opencircle">
        <listitem>
            <para><emphasis>message</emphasis> -&gt; message displayed to the user</para>
        </listitem>
        <listitem>
            <para><emphasis>valid-answers</emphasis> -&gt; optional slash separated string containing the possible valid answers</para>
        </listitem>
        <listitem>
            <para><emphasis>variable</emphasis> -&gt; result variable name holding the user input (default = ${userinput})</para>
        </listitem>        
    </itemizedlist>
    
    <para>The same action in Java DSL now looks quite familiar to us although attribute naming is slightly different:</para>
    
    <para><emphasis>Java DSL designer</emphasis></para>
    <programlisting language="java">@CitrusTest
public void inputActionTest() {
    variable("userinput", "");
    variable("userinput1", "");
    variable("userinput2", "y");
    variable("userinput3", "yes");
    variable("userinput4", "");
    
    input();
    echo("user input was: ${userinput}");
    input().message("Now press enter:").result("userinput1");
    echo("user input was: ${userinput1}");
    input().message("Do you want to continue?").answers("y", "n").result("userinput2");
    echo("user input was: ${userinput2}");
    input().message("Do you want to continue?").answers("yes", "no").result("userinput3");
    echo("user input was: ${userinput3}");
    input().result("userinput4");
    echo("user input was: ${userinput4}"); 
}</programlisting>

    <para><emphasis>Java DSL runner</emphasis></para>
    <programlisting language="java">@CitrusTest
public void inputActionTest() {
    variable("userinput", "");
    variable("userinput1", "");
    variable("userinput2", "y");
    variable("userinput3", "yes");
    variable("userinput4", "");

    input(action -> {});
    echo("user input was: ${userinput}");
    input(action -> action.message("Now press enter:").result("userinput1"));
    echo("user input was: ${userinput1}");
    input(action -> action.message("Do you want to continue?").answers("y", "n").result("userinput2"));
    echo("user input was: ${userinput2}");
    input(action -> action.message("Do you want to continue?").answers("yes", "no").result("userinput3"));
    echo("user input was: ${userinput3}");
    input(action -> action.result("userinput4"));
    echo("user input was: ${userinput4}");
}</programlisting>
    
    <para>When the user input is restricted to a set of valid answers the input validation of course can fail due to mismatch. This is the case when the user
    provides some input not matching the valid answers given. In this case the user is again asked to provide valid input. The test action will continue to ask for valid
    input until a valid answer is given.</para>
    
    <note>
        <para>User inputs may not fit to automatic testing in terms of continuous integration testing where no user is present to 
        type in the correct answer over the keyboard. In this case you can always skip the user input in advance by specifying
        a variable that matches the user input variable name. As the user input variable is then already present the user 
        input is missed out and the test proceeds automatically.</para>
    </note>
</section>