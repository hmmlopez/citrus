<?xml version="1.0" encoding="UTF-8"?>
<section id="actions-purge-channels">
    <title>Purging message channels</title>

    <para>Message channels define central messaging destinations in Citrus. These are namely in memory message queues holding 
    messages for test cases. These messages may become obsolete during a test run, especially when test cases fail and stop in 
    their message consumption. Purging these message channel destinations is essential in these scenarios in order to not influence
    upcoming test cases. Each test case should only receive those messages that actually refer to the test model. Therefore it is a 
    good idea to purge all message channel destinations between the test cases. Obsolete messages that get stuck in a message channel 
    destination for some reason are then removed so that upcoming test case are not broken.</para>
    
    <para>Following action definition purges all messages from a list of message channels:</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;testcase name=&quot;purgeChannelTest&quot;&gt;
  &lt;actions&gt;
      &lt;purge-channel&gt;
          &lt;channel name=&quot;someChannelName&quot;/&gt;
          &lt;channel name=&quot;anotherChannelName&quot;/&gt;
      &lt;/purge-channel&gt;
      
      &lt;purge-channel&gt;
          &lt;channel ref=&quot;someChannel&quot;/&gt;
          &lt;channel ref=&quot;anotherChannel&quot;/&gt;
      &lt;/purge-channel&gt;
  &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>

    <para>As you can see the test action supports channel names as well as channel references to Spring bean instances. When using channel references
    you refer to the Spring bean id or name in your application context.</para>
    
    <para>The Java DSL works quite similar as you can read from next examples:</para>
    
    <para><emphasis>Java DSL designer</emphasis></para>
    <programlisting language="java">@Autowired
@Qualifier("channelResolver")
private DestinationResolver&lt;MessageChannel&gt; channelResolver;

@CitrusTest
public void purgeTest() {
    purgeChannels()
        .channelResolver(channelResolver)
        .channelNames("ch1", "ch2", "ch3")
        .channel("ch4");
}</programlisting>

    <para><emphasis>Java DSL runner</emphasis></para>
    <programlisting language="java">@Autowired
@Qualifier("channelResolver")
private DestinationResolver&lt;MessageChannel&gt; channelResolver;

@CitrusTest
public void purgeTest() {
    purgeChannels(action ->
        action.channelResolver(channelResolver)
                .channelNames("ch1", "ch2", "ch3")
                .channel("ch4"));
}</programlisting>

    <para>The channel resolver reference is optional. By default Citrus will automatically use a Spring application context channel resolver so you just have to 
    use the respective Spring bean names that are configured in the Spring application context. However setting a custom channel resolver may be adequate for you
    in some special cases.</para>
    
    <para>While speaking of Spring application context bean references the next example uses such bean references for channels to purge.</para>

    <para><emphasis>Java DSL designer</emphasis></para>
    <programlisting language="java">@Autowired
@Qualifier("channel1")
private MessageChannel channel1;

@Autowired
@Qualifier("channel2")
private MessageChannel channel2;

@Autowired
@Qualifier("channel3")
private MessageChannel channel3;

@CitrusTest
public void purgeTest() {
    purgeChannels()
        .channels(channel1, channel2)
        .channel(channel3);
}</programlisting>

    <para><emphasis>Java DSL runner</emphasis></para>
    <programlisting language="java">@Autowired
@Qualifier("channel1")
private MessageChannel channel1;

@Autowired
@Qualifier("channel2")
private MessageChannel channel2;

@Autowired
@Qualifier("channel3")
private MessageChannel channel3;

@CitrusTest
public void purgeTest() {
    purgeChannels(action ->
        action.channels(channel1, channel2)
                .channel(channel3));
}</programlisting>
    
    <para>Message selectors enable you to selectively remove messages from the destination. All messages that
    pass the message selection logic get deleted the other messages will remain unchanged inside the channel destination. The 
    message selector is a Spring bean that implements a special message selector interface. A possible implementation could be a 
    selector deleting all messages that are older than five seconds:</para>
    
    <programlisting language="java">import org.springframework.messaging.Message;
import org.springframework.integration.core.MessageSelector;

public class TimeBasedMessageSelector implements MessageSelector {

    public boolean accept(Message&lt;?&gt; message) {
        if (System.currentTimeMillis() - message.getHeaders().getTimestamp() > 5000) {
            return false;
        } else {
            return true;
        }
    }

}</programlisting>

    <note><para>The message selector returns <emphasis>false</emphasis> for those messages that should be deleted from the channel!</para></note>
    
    <para>You simply define the message selector as a new Spring bean in the Citrus application context and reference it in your test action property.</para>
    
    <programlisting>&lt;bean id=&quot;specialMessageSelector&quot; 
    class=&quot;com.consol.citrus.special.TimeBasedMessageSelector&quot;/&gt;</programlisting>
    
    <para>Now let us have a look at how you reference the selector in your test case:</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;purge-channels message-selector=&quot;specialMessageSelector&quot;&gt;
          &lt;channel name=&quot;someChannelName&quot;/&gt;
          &lt;channel name=&quot;anotherChannelName&quot;/&gt;
      &lt;/purge-channels&gt;</programlisting>

    <para><emphasis>Java DSL designer</emphasis></para>
    <programlisting language="java">
@Autowired
@Qualifier("specialMessageSelector")
private MessageSelector specialMessageSelector;

@CitrusTest
public void purgeTest() {
    purgeChannels()
        .channelNames("ch1", "ch2", "ch3")
        .selector(specialMessageSelector);
}</programlisting>

    <para><emphasis>Java DSL runner</emphasis></para>
    <programlisting language="java">
@Autowired
@Qualifier("specialMessageSelector")
private MessageSelector specialMessageSelector;

@CitrusTest
public void purgeTest() {
    purgeChannels(action ->
        action.channelNames("ch1", "ch2", "ch3")
                .selector(specialMessageSelector));
}</programlisting>
    
    <para>Purging channels in each test case every time is quite exhausting because every test case needs to define a purging action at the 
    very beginning of the test. A more straight forward approach would be to introduce some purging action which is automatically executed before each test. 
    Fortunately the Citrus test suite offers a very simple way to do this. It is described in <xref linkend="testsuite-before-test"/>.</para>
        
    <para>When using the special action sequence before test cases we are able to purge channel destinations every time a test case executes.
    See the upcoming example to find out how the action is defined in the Spring configuration application context.</para>

    <programlisting>&lt;citrus:before-test id=&quot;purgeBeforeTest&quot;&gt;
    &lt;citrus:actions&gt;
        &lt;purge-channel&gt;
            &lt;channel name=&quot;fooChannel&quot;/&gt;
            &lt;channel name=&quot;barChannel&quot;/&gt;
        &lt;/purge-channel&gt;
    &lt;/citrus:actions&gt;
&lt;/citrus:before-test&gt;</programlisting>

    <para>Just use this before-test bean in the citrus-context.xml Spring bean application context and the purge channel action is active. Obsolete messages that are
    waiting on the message channels for consumption are purged before the next test in line is executed.</para>

    <tip>
        <para>Purging message channels becomes also very interesting when working with server instances in Citrus. Each server component automatically has an inbound message channel
        where incoming messages are stored to internally. So if you need to clean up a server that has already stored some incoming messages you can do this easily by purging the internal message
        channel. The message channel follows a naming convention <emphasis>{serverName}.inbound</emphasis> where <emphasis>{serverName}</emphasis> is the Spring bean name of the Citrus server
        endpoint component. If you purge this internal channel in a before test nature you are sure that obsolete messages on a server instance get purged before each test is executed.</para>
    </tip>
    
</section>