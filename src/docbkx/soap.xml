<?xml version="1.0" encoding="UTF-8"?>
<chapter id="soap-webservices">
    <title>SOAP WebServices</title>

    <para>SOAP Web Services over HTTP is a widely used communication scenario in modern enterprise applications. A SOAP Web Service client is posting a SOAP request via HTTP to a server.
    SOAP via HTTP is a synchronous message protocol by default so the client is waiting synchronously for the response message. Citrus provides both SOAP client and server components in
    order to meet both directions of this scenario. The components used are very similar to the HTTP components that were have discussed in the sections before.</para>
    
    <note>
        <para>The SOAP WebService components in Citrus are kept in a separate Maven module. So you should add the module
          as Maven dependency to your project accordingly.</para>

        <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.consol.citrus&lt;/groupId&gt;
  &lt;artifactId&gt;citrus-ws&lt;/artifactId&gt;
  &lt;version&gt;2.7-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</programlisting>

        <para>In order to use the SOAP WebService support you need to include the specific XML configuration schema provided by Citrus.
        See following XML definition to find out how to include the citrus-ws namespace.</para>
        
        <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:citrus=&quot;http://www.citrusframework.org/schema/config&quot;
       xmlns:citrus-ws=&quot;http://www.citrusframework.org/schema/ws/config&quot;
       xsi:schemaLocation=&quot;
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.citrusframework.org/schema/config 
       http://www.citrusframework.org/schema/config/citrus-config.xsd
       http://www.citrusframework.org/schema/ws/config 
       http://www.citrusframework.org/schema/ws/config/citrus-ws-config.xsd&quot;&gt;
       
    [...]
    
&lt;/beans&gt;</programlisting>
        
        <para>Now you are ready to use the customized soap configuration elements - all using the citrus-ws prefix -
        in your Spring configuration.</para>
    </note>
    
    <section id="soap-client">
        <title>SOAP client</title>
        
        <para>Citrus is able to form a proper SOAP request in order to pass it to the server via HTTP and validate the respective SOAP response message. Let us see how a message client for SOAP
        looks like in the Spring configuration:</para>
        
        <programlisting>&lt;citrus-ws:client id=&quot;soapClient&quot;
                       request-url=&quot;http://localhost:8090/test&quot;
                       timeout=&quot;60000&quot;/&gt;</programlisting>
        
        <para>The client component uses the <emphasis>request-url</emphasis> in order to access the server resource. The client will automatically build a proper SOAP request message including
        the SOAP envelope, SOAP header and the message payload as SOAP body. This means that you as a tester do not care about SOAP envelope specific logic in the test case. The client endpoint
        component saves the synchronous SOAP response so the test case can receive this message with a normal receive test action.</para>

        <para>In detail you as a tester just send and receive using the same client endpoint reference just as you would do with a synchronous JMS or channel communication. In case no response
        message is available in time according to the timeout settings Citrus raises a timeout error and the test will fail.</para>
        
        <important>
            <para>The SOAP client component uses a SoapMessageFactory implementation in order to create the SOAP messages. This is a Spring bean added to the Citrus Spring application context.
            Spring offers several reference implementations as message factories so you can choose one of them (e.g. for SOAP 1.1 or 1.2 implementations).</para>
            
            <programlisting>&lt;!-- Default SOAP Message Factory (SOAP 1.1) --&gt;
&lt;bean id=&quot;messageFactory&quot; class=&quot;org.springframework.ws.soap.saaj.SaajSoapMessageFactory&quot;/&gt;

&lt;!-- SOAP 1.2 Message Factory --&gt;
&lt;bean id=&quot;soap12MessageFactory&quot; class=&quot;org.springframework.ws.soap.saaj.SaajSoapMessageFactory&quot;&gt;
  &lt;property name=&quot;soapVersion&quot;&gt;
    &lt;util:constant static-field=&quot;org.springframework.ws.soap.SoapVersion.SOAP_12&quot;/&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>
            
            <para>By default Citrus will search for a bean with id <emphasis>'messageFactory'</emphasis>. In case you intend to use different identifiers you need to tell the SOAP client component
            which message factory to use:</para>
            
            <programlisting>&lt;citrus-ws:client id=&quot;soapClient&quot;
         request-url=&quot;http://localhost:8090/test&quot;
         message-factory=&quot;soap12MessageFactory&quot;/&gt;</programlisting>
        </important>
        
        <tip>
            <para>Up to now we have used a static endpoint request url for the SOAP message sender. Besides that we can use dynamic endpoint uri in configuration. We just use an endpoint uri resolver
            instead of the static request url like this:</para>
            
            <programlisting>&lt;citrus-ws:client id=&quot;soapClient&quot;
             endpoint-resolver=&quot;dynamicEndpointResolver&quot; 
             message-factory=&quot;soap12MessageFactory&quot;/&gt;
             
&lt;bean id=&quot;dynamicEndpointResolver&quot; 
       class=&quot;com.consol.citrus.endpoint.resolver.DynamicEndpointUriResolver&quot;/&gt;</programlisting>
             
             <para>The <emphasis>dynamicEndpointResolver</emphasis> bean must implement the EndpointUriResolver interface in order to resolve
             dynamic endpoint uri values. Citrus offers a default implementation, the <emphasis>DynamicEndpointUriResolver</emphasis>, which
             uses a specific message header for setting the dynamic endpoint uri for each message. The message header needs to specify the header
             <emphasis>citrus_endpoint_uri</emphasis> with a valid request uri. Just like this:</para>
             
             <programlisting>&lt;header&gt;
  &lt;element name=&quot;citrus_endpoint_uri&quot; 
           value=&quot;http://localhost:${port}/${context}&quot; /&gt;
&lt;/header&gt;</programlisting>

             <para>As you can see you can use dynamic test variables then in order to build the request uri to use. The SOAP client evaluates the endpoint uri header and sends the message to this
             server resource. You can use a different uri value then in different test cases and send actions.</para>
        </tip>
    </section>
    
    <section id="soap-server">
        <title>SOAP server</title>
        
        <para>Every client need a server to talk to. When receiving SOAP messages we require a web server instance listening on a port. Citrus is using an embedded Jetty server instance in combination
        with the Spring Web Service API in order to accept SOAP request calls asa server. See how the Citrus SOAP server is configured in the Spring configuration.</para>
        
        <programlisting>&lt;citrus-ws:server id=&quot;helloSoapServer&quot;
             port=&quot;8080&quot;
             auto-start=&quot;true&quot;
             resource-base=&quot;src/it/resources&quot;/&gt;</programlisting>
        
        <para>The server component is able to start automatically when application starts up. In the example above the server is listening for requests on port <literal>8080</literal>. This setup uses the standard
        connector configuration for the Jetty server. For detailed customization the Citrus Jetty server configuration also supports explicit connector configurations (@connector and @connectors attributes).
        For more information please see the Jetty connector documentation.</para>

        <para>Test cases interact with this server instance via message channels by default. The server component provides an inbound channel that holds incoming request messages. The test case can receive those
        requests from the channel with a normal receive test action. In a second step the test case can provide a synchronous response message as reply which will be automatically sent back to the calling SOAP client as response.</para>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" display="block" fileref="figure_010.jpg" format="JPG" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center" display="block" fileref="figure_010.jpg" format="JPG" />
          </imageobject>
        </mediaobject>

      <para>The figure above shows the basic setup with inbound channel and reply channel. You as a tester should not worry about this to much. By default you as a tester just use the server as synchronous endpoint
      in your test case. This means that you simply receive a message from the server and send a response back.</para>

      <programlisting>&lt;testcase name=&quot;soapServerTest&quot;&gt;
    &lt;actions&gt;
        &lt;receive endpoint=&quot;helloSoapServer&quot;&gt;
            &lt;message&gt;
                &lt;data&gt;
                  [...]
                &lt;/data&gt;
            &lt;/message&gt;
        &lt;/receive&gt;

        &lt;send endpoint=&quot;helloSoapServer&quot;&gt;
            &lt;message&gt;
                &lt;data&gt;
                  [...]
                &lt;/data&gt;
            &lt;/message&gt;
        &lt;/send&gt;
    &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>

      <para>As you can see we reference the server id in both receive and send actions. The Citrus server instance will automatically send the response back to the calling client. In most cases this is what you need to
      simulate a SOAP server instance in Citrus. Of course we have some more customization possibilities that we will go over later on. This customizations are optional so you can also skip the next description on endpoint adapters if
      you are happy with just what you have learned about the SOAP server component in Citrus.</para>

      <para>Just like the HTTP server component the SOAP server component by default uses the channel endpoint adapter in order to forward all incoming requests to an in memory message channel. This is done completely behind the scenes.
      The Citrus configuration has become a lot easier here so you do not have to configure this by default. When nothing else is set the test case does not worry about that settings on the server and just uses the server id reference
      as synchronous endpoint.</para>

      <tip>
        <para>The default channel endpoint adapter automatically creates an inbound message channel where incoming messages are stored to internally. So if you need to clean up a server that has already stored some incoming messages
          you can do this easily by purging the internal message channel. The message channel follows a naming convention <emphasis>{serverName}.inbound</emphasis> where <emphasis>{serverName}</emphasis> is the Spring bean name of the Citrus server
          endpoint component. If you purge this internal channel in a before test nature you are sure that obsolete messages on a server instance get purged before each test is executed.</para>
      </tip>

      <para>However we do not want to loose the great extendability and customizing capabilities of the Citrus server component. This is why you can optionally define the endpoint adapter implementation used by the Citrus SOAP server. We
      provide several message endpoint adapter implementations for different simulation strategies. With these endpoint adapters you should be able to generate proper SOAP response messages for the client in various ways. Before we have a closer
      look at the different adapter implementations we want to show how you can set a custom endpoint adapter on the server component.</para>

      <programlisting>&lt;citrus-ws:server id=&quot;helloSoapServer&quot;
        port=&quot;8080&quot;
        auto-start=&quot;true&quot;
        endpoint-adapter=&quot;emptyResponseEndpointAdapter&quot;
        resource-base=&quot;src/it/resources&quot;/&gt;

        &lt;citrus:empty-response-adapter id=&quot;emptyResponseEndpointAdapter&quot;/&gt;</programlisting>

      <para>With this endpoint adapter configuration above we change the Citrus server behavior from scratch. Now the server automatically sends back an empty SOAP response message every time. Setting a custom endpoint adapter implementation
      with custom logic is easy as defining a custom endpoint adapter Spring bean and reference it in the server attribute. You can read more about endpoint adapters in <xref linkend="endpoint-adapter"/>.</para>
    </section>

    <section id="soap-send-receive">
      <title>SOAP send and receive</title>

        <para>Citrus provides test actions for sending and receiving messages of all kind. Different message content and different message transports are available to these send and receive actions. When using SOAP message transport
        we might need to set special information on that messages. These are special SOAP headers, SOAP faults and so on. So we have created a special SOAP namespace for all your SOAP related send and receive operations in a XML DSL test:</para>

        <programlisting>&lt;spring:beans xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot;
          xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot;
          xmlns:ws=&quot;http://www.citrusframework.org/schema/ws/testcase&quot;
          xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.citrusframework.org/schema/testcase
          http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd
          http://www.citrusframework.org/schema/ws/testcase
          http://www.citrusframework.org/schema/ws/testcase/citrus-ws-testcase.xsd&quot;&gt;</programlisting>

        <para>Once you have added the <emphasis>ws</emphasis> namespace from above to your test case you are ready to use special send and receive operations in the test.</para>

        <para><emphasis>XML DSL</emphasis></para>
        <programlisting>&lt;ws:send endpoint=&quot;soapClient&quot; soap-action=&quot;MySoapService/sayHello&quot;&gt;
    &lt;message&gt;
        [...]
    &lt;/message&gt;
&lt;/ws:send&gt;

          &lt;ws:receive endpoint=&quot;soapServer&quot; soap-action=&quot;MySoapService/sayHello&quot;&gt;
    &lt;message&gt;
        [...]
    &lt;/message&gt;
&lt;/ws:receive&gt;</programlisting>

      <para>The special namespace contains following elements:</para>

      <itemizedlist>
        <listitem><emphasis>send</emphasis>: Special send operation for sending out SOAP message content.</listitem>
        <listitem><emphasis>receive</emphasis>: Special receive operation for validating SOAP message content.</listitem>
        <listitem><emphasis>send-fault</emphasis>: Special send operation for sending out SOAP fault message content.</listitem>
        <listitem><emphasis>assert-fault</emphasis>: Special assertion operation for expecting a SOAP fault message as response.</listitem>
      </itemizedlist>

      <para>The special SOAP related send and receive actions can coexist with normal Citrus actions. In fact you can mix those action types as you want inside of a test case. All test actions that work with
      SOAP message content on client and server side should use this special namespace.</para>

      <para>In Java DSL we have something similar to that. The Java DSL provides special SOAP related features when calling the <emphasis>soap()</emphasis> method. With a fluent API you are able to then
      send and receive SOAP message content as client and server.</para>

      <para><emphasis>Java DSL</emphasis></para>
      <programlisting>@CitrusTest
public void soapTest() {

    soap().client(&quot;soapClient&quot;)
        .send()
        .soapAction(&quot;MySoapService/sayHello&quot;)
        .payload(&quot;...&quot;);

    soap().client(&quot;soapClient&quot;)
        .receive()
        .payload(&quot;...&quot;);
}</programlisting>

      <para>In the following sections the SOAP related capabilities are discussed in more detail.</para>
    </section>

    <section id="soap-header">
        <title>SOAP headers</title>

        <para>SOAP defines several header variations that we discuss in the following sections. First of all we deal with the special <emphasis>SOAP action</emphasis> header. In case we need to set this SOAP action header we simply need to use
        the special <literal>soap-action</literal> attribute in our test. The special header key in combination with a underlying SOAP client endpoint component constructs the SOAP action in the SOAP message.</para>

      <para><emphasis>XML DSL</emphasis></para>
      <programlisting>&lt;ws:send endpoint=&quot;soapClient&quot; soap-action=&quot;MySoapService/sayHello&quot;&gt;
    &lt;message&gt;
        [...]
    &lt;/message&gt;
&lt;/ws:send&gt;

          &lt;ws:receive endpoint=&quot;soapServer&quot; soap-action=&quot;MySoapService/sayHello&quot;&gt;
    &lt;message&gt;
        [...]
    &lt;/message&gt;
&lt;/ws:receive&gt;</programlisting>

      <para><emphasis>Java DSL</emphasis></para>
      <programlisting>@CitrusTest
public void soapActionTest() {

    soap().client(&quot;soapClient&quot;)
        .send()
        .soapAction(&quot;MySoapService/sayHello&quot;)
        .payload(&quot;...&quot;);

    soap().server(&quot;soapClient&quot;)
        .receive()
        .soapAction(&quot;MySoapService/sayHello&quot;)
        .payload(&quot;...&quot;);
}</programlisting>

        <para>The SOAP action header is added to the message before sending and validated when used in a receive operation.</para>

        <note>
          <para>The <emphasis>soap-action</emphasis> attribute is defined in the special SOAP namespace in Citrus. We recommend to use this namespace for all your send and receive operations that deal with SOAP message content. However
          you can also set the special SOAP action header when not using the special SOAP namespace: Just set this header in your test action:</para>

        <programlisting>&lt;header&gt;
    &lt;element name=&quot;citrus_soap_action&quot; value=&quot;sayHello&quot;/&gt;
&lt;/header&gt;</programlisting>
        </note>

        <para>Secondly a SOAP message is able to contain customized SOAP headers. These are key-value pairs where the key is a qualified name (QName) and the value a normal String value.</para>

        <programlisting>&lt;header&gt;
    &lt;element name=&quot;{http://www.consol.de/sayHello}h1:Operation&quot; value=&quot;sayHello&quot;/&gt;
    &lt;element name=&quot;{http://www.consol.de/sayHello}h1:Request&quot; value=&quot;HelloRequest&quot;/&gt;
&lt;/header&gt;</programlisting>

        <para>The key is defined as qualified QName character sequence which has a mandatory XML namespace and a prefix along with a header name. Last not least a SOAP header can contain whole XML fragment values. The next example shows how to
        set these XML fragments as SOAP header in Citrus:</para>

        <programlisting>&lt;header&gt;
    &lt;data&gt;
      &lt;![CDATA[
          &lt;User xmlns=&quot;http://www.consol.de/schemas/sayHello&quot;&gt;
              &lt;UserId&gt;123456789&lt;/UserId&gt;
              &lt;Handshake&gt;S123456789&lt;/Handshake&gt;
          &lt;/User&gt;
      ]]&gt;
    &lt;/data&gt;
&lt;/header&gt;</programlisting>

        <para>You can also use external file resources to set this SOAP header XML fragment as shown in this last example code:</para>

        <programlisting>&lt;header&gt;
    &lt;resource file=&quot;classpath:request-soap-header.xml&quot;/&gt;
&lt;/header&gt;</programlisting>

        <para>This completes the SOAP header possibilities for sending SOAP messages with Citrus. Of course you can also use these variants in SOAP message header validation. You define expected SOAP headers, SOAP action and XML fragments
        and Citrus will match incoming request to that. Just use <emphasis>citrus_soap_action</emphasis> header key in your receiving message action and you validate this SOAP header accordingly.</para>

        <para>When validating SOAP header XML fragments you need to define the whole XML header fragment as expected header data like this:</para>

        <programlisting>&lt;receive endpoint=&quot;soapMessageEndpoint&quot;&gt;
    &lt;message&gt;
        &lt;data&gt;
          &lt;![CDATA[
            &lt;ResponseMessage xmlns=&quot;http://citrusframework.org/schema&quot;&gt;
              &lt;resultCode&gt;OK&lt;/resultCode&gt;
            &lt;/ResponseMessage&gt;
          ]]&gt;
        &lt;/data&gt;
    &lt;/message&gt;
    &lt;header&gt;
        &lt;data&gt;
            &lt;![CDATA[
                &lt;SOAP-ENV:Header
                    xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
                    &lt;customHeader xmlns=&quot;http://citrusframework.org/headerschema&quot;&gt;
                        &lt;correlationId&gt;${correlationId}&lt;/correlationId&gt;
                        &lt;applicationId&gt;${applicationId}&lt;/applicationId&gt;
                        &lt;trackingId&gt;${trackingId}&lt;/trackingId&gt;
                        &lt;serviceId&gt;${serviceId}&lt;/serviceId&gt;
                        &lt;interfaceVersion&gt;1.0&lt;/interfaceVersion&gt;
                        &lt;timestamp&gt;@ignore@&lt;/timestamp&gt;
                    &lt;/customHeader&gt;
                &lt;/SOAP-ENV:Header&gt;
            ]]&gt;
        &lt;/data&gt;
        &lt;element name=&quot;citrus_soap_action&quot; value=&quot;doResponse&quot;/&gt;
    &lt;/header&gt;
&lt;/receive&gt;</programlisting>

        <para>As you can see the SOAP XML header validation can combine header element and XML fragment validation. This is also likely to be used when dealing with WS-Security message headers.</para>
    </section>

    <section id="soap-mime-headers">
      <title>SOAP HTTP mime headers</title>

      <para>Besides the SOAP specific header elements the HTTP mime headers (e.g. Content-Type, Content-Length, Authorization) might be candidates for validation, too.
      When using HTTP as transport layer the SOAP message may define those mime headers. The tester is able to send and validate these headers inside the test case, although these
      HTTP headers are located outside of the SOAP envelope. Let us first of all speak about validating the HTTP mime headers. This feature is not enabled by default. We
      have enable this in our SOAP server configuration.</para>

      <programlisting>&lt;citrus-ws:server id=&quot;helloSoapServer&quot;
        port=&quot;8080&quot;
        auto-start=&quot;true&quot;
        handle-mime-headers=&quot;true&quot;
        resource-base=&quot;src/it/resources&quot;/&gt;</programlisting>

      <para>With this configuration Citrus will handle all available mime headers and pass those to the test case for normal header validation.</para>

      <programlisting>&lt;ws:receive endpoint=&quot;helloSoapServer&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;SoapMessageRequest xmlns=&quot;http://www.consol.de/schemas/sample.xsd&quot;&gt;
                &lt;Operation&gt;Validate mime headers&lt;/Operation&gt;
            &lt;/SoapMessageRequest&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
    &lt;header&gt;
        &lt;element name=&quot;Content-Type&quot; value=&quot;text/xml; charset=utf-8&quot;/&gt;
    &lt;/header&gt;
&lt;/ws:receive&gt;</programlisting>

      <para>The validation of these HTTP mime headers is as usual now that we have enabled the mime header handling in the SOAP server. The transport HTTP headers are available in the header
      just like the normal SOAP header elements do. So you can validate the headers as usual.</para>

      <para>So much for receiving and validating HTTP mime message headers with SOAP communication. Now we want to send special mime headers on client side. We overwrite or add mime
      headers to our sending action. We mark some headers with following prefix <literal>&quot;citrus_http_&quot;</literal>. This tells the SOAP client to add these headers to the
      HTTP header section outside the SOAP envelope. Keep in mind that header elements without this prefix go right into the SOAP header section by default.</para>

      <programlisting>&lt;ws:send endpoint=&quot;soapClient&quot;&gt;
  [...]
  &lt;header&gt;
    &lt;element name=&quot;citrus_http_operation&quot; value=&quot;foo&quot;/&gt;
  &lt;/header&gt;
  [...]
&lt;/ws:send&gt;</programlisting>

      <para>The listing above defines a HTTP mime header <emphasis>operation</emphasis>. The header prefix <literal>citrus_http_</literal> is cut off before the header goes into the HTTP
      header section. With this feature we can decide where exactly our header information is located in our resulting client message.</para>
    </section>

    <section id="soap-keep-envelope">
      <title>SOAP Envelope handling</title>

      <para>By default Citrus will remove the SOAP envelope in message converter. Following from that the Citrus test case is independent from SOAP message formats and is not bothered with handling of SOAP
      envelope at all. This is great in most cases but sometimes it might be mandatory to also see the whole SOAP envelope inside the test case receive action. Therefore you can keep the SOAP envelope for incoming
      messages by configuration on the SOAP server side.</para>

      <programlisting>&lt;citrus-ws:server id=&quot;helloSoapServer&quot;
        port=&quot;8080&quot;
        auto-start=&quot;true&quot;
        keep-soap-envelope=&quot;true&quot;/&gt;</programlisting>

      <para>With this configuration Citrus will handle all available mime headers and pass those to the test case for normal header validation.</para>

      <programlisting>&lt;ws:receive endpoint=&quot;helloSoapServer&quot;&gt;
&lt;message&gt;
  &lt;payload&gt;
    &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
      &lt;SOAP-ENV:Header/&gt;
      &lt;SOAP-ENV:Body&gt;
        &lt;SoapMessageRequest xmlns=&quot;http://www.consol.de/schemas/sample.xsd&quot;&gt;
        &lt;Operation&gt;Validate mime headers&lt;/Operation&gt;
        &lt;/SoapMessageRequest&gt;
      &lt;/SOAP-ENV:Body&gt;
    &lt;/SOAP-ENV:Envelope&gt;
  &lt;/payload&gt;
  &lt;/message&gt;
&lt;/ws:receive&gt;</programlisting>

      <para>So now you are able to validate the whole SOAP envelope as is. This might be of interest in very special cases. As mentioned by default the Citrus server will automatically remove the SOAP envelope and
      translate the SOAP body to the message payload for straight forward validation inside the test cases.</para>
    </section>

    <section id="soap-12">
      <title>SOAP 1.2</title>

      <para>By default Citrus components use SOAP 1.1 version. Fortunately SOAP 1.2 is supported same way. As we already mentioned before the Citrus SOAP components do use a SOAP message factory
      for creating messages in SOAP format.</para>

      <programlisting>&lt;!-- SOAP 1.1 Message Factory --&gt;
&lt;bean id=&quot;soapMessageFactory&quot; class=&quot;org.springframework.ws.soap.saaj.SaajSoapMessageFactory&quot;&gt;
  &lt;property name=&quot;soapVersion&quot;&gt;
    &lt;util:constant static-field=&quot;org.springframework.ws.soap.SoapVersion.SOAP_11&quot;/&gt;
  &lt;/property&gt;
&lt;/bean&gt;

&lt;!-- SOAP 1.2 Message Factory --&gt;
&lt;bean id=&quot;soap12MessageFactory&quot; class=&quot;org.springframework.ws.soap.saaj.SaajSoapMessageFactory&quot;&gt;
  &lt;property name=&quot;soapVersion&quot;&gt;
    &lt;util:constant static-field=&quot;org.springframework.ws.soap.SoapVersion.SOAP_12&quot;/&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>

      <para>As you can see the SOAP message factory can either create SOAP 1.1 or SOAP 1.2 messages. This is how Citrus can create both SOAP 1.1 and SOAP 1.2 messages. Of course you can have multiple message
      factories configured in your project. Just set the message factory on a WebService client or server component in order to define which version should be used.</para>

      <programlisting>&lt;citrus-ws:client id=&quot;soap12Client&quot;
            request-url=&quot;http://localhost:8080/echo&quot;
            message-factory=&quot;soap12MessageFactory&quot;
            timeout=&quot;1000&quot;/&gt;

&lt;citrus-ws:server id=&quot;soap12Server&quot;
          port=&quot;8080&quot;
          auto-start=&quot;true&quot;
          root-parent-context=&quot;true&quot;
          message-factory=&quot;soap12MessageFactory&quot;/&gt;</programlisting>

      <para>By default Citrus components do connect with a message factory called <emphasis>messageFactory</emphasis> no matter what SOAP version this factory is using.</para>
    </section>

    <section id="soap-faults">
        <title>SOAP faults</title>

        <para>SOAP faults describe a failed communication in SOAP WebServices world. Citrus is able to send and receive SOAP fault messages. On server side
        Citrus can simulate SOAP faults with fault-code, fault-reason, fault-actor and fault-detail. On client side Citrus is able to handle and validate SOAP faults
        in response messages. The next section describes how to deal with SOAP faults in Citrus.</para>

        <section id="soap-fault-send">
            <title>Send SOAP faults</title>

            <para>As Citrus simulates SOAP server endpoints you also need to think about sending a SOAP fault to the calling client. In case Citrus receives a SOAP
            request as a server you can respond with a proper SOAP fault if necessary.</para>

            <para>Please keep in mind that we use the citrus-ws extension for sending SOAP faults in our test case, as shown in this very
            simple example:</para>

            <para><emphasis>XML DSL</emphasis></para>
            <programlisting>&lt;ws:send-fault endpoint=&quot;helloSoapServer&quot;&gt;
    &lt;ws:fault&gt;
        &lt;ws:fault-code&gt;{http://www.citrusframework.org/faults}citrus:TEC-1000&lt;/ws:fault-code&gt;
        &lt;ws:fault-string&gt;Invalid request&lt;/ws:fault-string&gt;
        &lt;ws:fault-actor&gt;SERVER&lt;/ws:fault-actor&gt;
        &lt;ws:fault-detail&gt;
            &lt;![CDATA[
                &lt;FaultDetail xmlns=&quot;http://www.consol.de/schemas/sayHello.xsd&quot;&gt;
                    &lt;MessageId&gt;${messageId}&lt;/MessageId&gt;
                    &lt;CorrelationId&gt;${correlationId}&lt;/CorrelationId&gt;
                    &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
                    &lt;Text&gt;Invalid request&lt;/Text&gt;
                &lt;/FaultDetail&gt;
            ]]&gt;
        &lt;/ws:fault-detail&gt;
    &lt;/ws:fault&gt;
    &lt;ws:header&gt;
        &lt;ws:element name=&quot;citrus_soap_action&quot; value=&quot;sayHello&quot;/&gt;
    &lt;/ws:header&gt;
&lt;/ws:send-fault&gt;</programlisting>

            <para>The example generates a simple SOAP fault that is sent back to the calling client. The fault-actor and the fault-detail elements are optional.
            Same with the soap action declared in the special Citrus header <literal>citrus_soap_action</literal>. In the sample above the fault-detail data is
            placed inline as XML data. As an alternative to that you can also set the fault-detail via external file resource. Just use the
            <literal>file</literal> attribute as fault detail instead of the inline CDATA definition.</para>

          <para><emphasis>XML DSL</emphasis></para>
          <programlisting>&lt;ws:send-fault endpoint=&quot;helloSoapServer&quot;&gt;
    &lt;ws:fault&gt;
        &lt;ws:fault-code&gt;{http://www.citrusframework.org/faults}citrus:TEC-1000&lt;/ws:fault-code&gt;
        &lt;ws:fault-string&gt;Invalid request&lt;/ws:fault-string&gt;
        &lt;ws:fault-actor&gt;SERVER&lt;/ws:fault-actor&gt;
        &lt;ws:fault-detail file=&quot;classpath:myFaultDetail.xml&quot;/&gt;
    &lt;/ws:fault&gt;
    &lt;ws:header&gt;
        &lt;ws:element name=&quot;citrus_soap_action&quot; value=&quot;sayHello&quot;/&gt;
    &lt;/ws:header&gt;
&lt;/ws:send-fault&gt;</programlisting>

            <para>The generated SOAP fault looks like follows:</para>

            <programlisting>HTTP/1.1 500 Internal Server Error
Accept: text/xml, text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
SOAPAction: &quot;sayHello&quot;
Content-Type: text/xml; charset=utf-8
Content-Length: 680
Server: Jetty(7.0.0.pre5)

&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
    &lt;SOAP-ENV:Header/&gt;
    &lt;SOAP-ENV:Body&gt;
        &lt;SOAP-ENV:Fault&gt;
            &lt;faultcode xmlns:citrus=&quot;http://www.citrusframework.org/faults&quot;&gt;citrus:TEC-1000&lt;/faultcode&gt;
            &lt;faultstring xml:lang=&quot;en&quot;&gt;Invalid request&lt;/faultstring&gt;
            &lt;detail&gt;
                &lt;FaultDetail xmlns=&quot;http://www.consol.de/schemas/sayHello.xsd&quot;&gt;
                    &lt;MessageId&gt;9277832563&lt;/MessageId&gt;
                    &lt;CorrelationId&gt;4346806225&lt;/CorrelationId&gt;
                    &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
                    &lt;Text&gt;Invalid request&lt;/Text&gt;
                &lt;/FaultDetail&gt;
            &lt;/detail&gt;
        &lt;/SOAP-ENV:Fault&gt;
    &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</programlisting>

            <important>Notice that the send action uses a special XML namespace (ws:send). This ws namespace belongs to the Citrus WebService extension and
            adds SOAP specific features to the normal send action. When you use such ws extensions you need to define the additional namespace in your test case.
            This is usually done in the root <emphasis>&lt;spring:beans&gt;</emphasis> element where we simply declare the citrus-ws specific namespace like follows.

                <programlisting>&lt;spring:beans xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot;
    xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:ws=&quot;http://www.citrusframework.org/schema/ws/testcase&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.citrusframework.org/schema/testcase
    http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd
    http://www.citrusframework.org/schema/ws/testcase
    http://www.citrusframework.org/schema/ws/testcase/citrus-ws-testcase.xsd&quot;&gt;</programlisting>
            </important>
        </section>

        <section id="soap-fault-receive">
            <title>Receive SOAP faults</title>

            <para>In case you receive SOAP response messages as a client endpoint you may need to handle and validate SOAP faults
            in error situations. Citrus can validate SOAP faults with fault-code, fault-actor, fault-string and fault-detail values.</para>

            <para>As a client we send out a request and receive a SOAP fault as response. By default the client sending action in Citrus
            throws a specific exception when the SOAP response is a SOAP fault element. This exception is called <literal>SoapFaultClientException</literal>
            coming from the Spring API. You as a tester can assert this kind of exception in a test case in order to expect the SOAP error.</para>

            <para><emphasis>XML DSL</emphasis></para>
            <programlisting>&lt;assert class=&quot;org.springframework.ws.soap.client.SoapFaultClientException&quot;&gt;
    &lt;send endpoint=&quot;soapClient&quot;&gt;
        &lt;message&gt;
            &lt;payload&gt;
                &lt;SoapFaultForcingRequest
                  xmlns=&quot;http://www.consol.de/schemas/soap&quot;&gt;
                    &lt;Message&gt;This is invalid&lt;/Message&gt;
                &lt;/SoapFaultForcingRequest&gt;
            &lt;/payload&gt;
        &lt;/message&gt;
    &lt;/send&gt;
&lt;/assert&gt;</programlisting>

            <para>The SOAP message sending action is surrounded by a simple assert action. The asserted exception class is the
            <literal>SoapFaultClientException</literal> that we have mentioned before. This means that the test expects the exception to be thrown during the communication.
            In case the exception is missing the test is fails.</para>

            <para>So far we have used the Citrus core capabilities of asserting an exception. This basic assertion test action is not able to offer direct access to the SOAP
            fault-code and fault-string values for validation. The basic assert action simply has no access to the actual SOAP fault elements. Fortunately we can use the
            <emphasis>citrus-ws</emphasis> namespace again which offers a special assert action implementation especially designed for SOAP faults in this case.</para>

            <para><emphasis>XML DSL</emphasis></para>
            <programlisting>&lt;ws:assert-fault fault-code=&quot;{http://www.citrusframework.org/faults}TEC-1001&quot;
           fault-string=&quot;Invalid request&quot;&gt;
           fault-actor=&quot;SERVER&quot;&gt;
  &lt;ws:when&gt;
    &lt;send endpoint=&quot;soapClient&quot;&gt;
        &lt;message&gt;
            &lt;payload&gt;
                &lt;SoapFaultForcingRequest
                  xmlns=&quot;http://www.consol.de/schemas/soap&quot;&gt;
                    &lt;Message&gt;This is invalid&lt;/Message&gt;
                &lt;/SoapFaultForcingRequest&gt;
            &lt;/payload&gt;
        &lt;/message&gt;
    &lt;/send&gt;
  &lt;/ws:when&gt;
&lt;/ws:assert-fault&gt;</programlisting>

            <para>The special assert action offers several attributes to validate the expected SOAP fault. Namely these are <emphasis>"fault-code"</emphasis>,
            <emphasis>"fault-string"</emphasis> and <emphasis>"fault-actor"</emphasis>. The <emphasis>fault-code</emphasis> is defined as a QName string and
            is mandatory for the validation. The fault assertion also supports test variable replacement as usual (e.g. fault-code=&quot;{http://www.citrusframework.org/faults}${myFaultCode}&quot;).</para>

            <para>The time you use SOAP fault validation you need to tell Citrus how to validate the SOAP faults. Citrus needs an
            instance of a <literal>SoapFaultValitator</literal> that we need to add to the Spring application context. By default
            Citrus is searching for a bean with the id <emphasis>'soapFaultValidator'</emphasis>.</para>

            <programlisting>&lt;bean id=&quot;soapFaultValidator&quot; class=&quot;com.consol.citrus.ws.validation.SimpleSoapAttachmentValidator&quot;/&gt;</programlisting>

            <para>Citrus offers several reference implementations for these SOAP fault validators. These are:</para>

            <itemizedlist>
                <listitem><emphasis>com.consol.citrus.ws.validation.SimpleSoapAttachmentValidator</emphasis></listitem>
                <listitem><emphasis>com.consol.citrus.ws.validation.SimpleSoapFaultValidator</emphasis></listitem>
                <listitem><emphasis>com.consol.citrus.ws.validation.XmlSoapFaultValidator</emphasis></listitem>
            </itemizedlist>

            <para>Please see the API documentation for details on the available reference implementations. Of course you can also define your own SOAP validator logic
            (would be great if you could share your ideas!). In the test case you can explicitly choose the validator to use:</para>

            <para><emphasis>XML DSL</emphasis></para>
            <programlisting>&lt;ws:assert-fault fault-code=&quot;{http://www.citrusframework.org/faults}TEC-1001&quot;
              fault-string=&quot;Invalid request&quot;
              fault-validator=&quot;mySpecialSoapFaultValidator&quot;&gt;
   [...]
&lt;/ws:assert-fault&gt;</programlisting>

            <important>
                <para>Another important thing to notice when asserting SOAP faults is the fact, that Citrus needs to have a <literal>SoapMessageFactory</literal> available in
                the Spring application context. If you deal with SOAP messaging in general you will already have such a bean in the context.</para>

                <programlisting>&lt;bean id=&quot;messageFactory&quot; class=&quot;org.springframework.ws.soap.saaj.SaajSoapMessageFactory&quot;/&gt;</programlisting>

                <para>Choose one of Spring's reference implementations or some other implementation as SOAP message factory. Citrus will search for a bean
                with id <emphasis>'messageFactory'</emphasis> by default. In case you have other beans with different identifiers please choose the
                messageFactory in the test case assert action:</para>

                <para><emphasis>XML DSL</emphasis></para>
                <programlisting>&lt;ws:assert-fault fault-code=&quot;{http://www.citrusframework.org/faults}TEC-1001&quot;
              fault-string=&quot;Invalid request&quot;
              message-factory=&quot;mySpecialMessageFactory&quot;&gt;
   [...]
&lt;/ws:assert-fault&gt;</programlisting>
            </important>

            <important>Notice the ws specific namespace that belongs to the Citrus WebService extensions. As the <emphasis>ws:assert</emphasis> action uses SOAP specific features
            we need to refer to the citrus-ws namespace. You can find the namespace declaration in the root element in your test case.

                <programlisting>&lt;spring:beans xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot;
    xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:ws=&quot;http://www.citrusframework.org/schema/ws/testcase&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.citrusframework.org/schema/testcase
    http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd
    http://www.citrusframework.org/schema/ws/testcase
    http://www.citrusframework.org/schema/ws/testcase/citrus-ws-testcase.xsd&quot;&gt;</programlisting>
            </important>

            <para>Citrus is also able to validate SOAP fault details. See the following example for understanding how to do it:</para>

            <para><emphasis>XML DSL</emphasis></para>
            <programlisting>&lt;ws:assert-fault fault-code=&quot;{http://www.citrusframework.org/faults}TEC-1001&quot;
           fault-string=&quot;Invalid request&quot;&gt;
    &lt;ws:fault-detail&gt;
      &lt;![CDATA[
          &lt;FaultDetail xmlns=&quot;http://www.consol.de/schemas/soap&quot;&gt;
              &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
              &lt;Text&gt;Invalid request&lt;/Text&gt;
          &lt;/FaultDetail&gt;
      ]]&gt;
    &lt;/ws:fault-detail&gt;
    &lt;ws:when&gt;
        &lt;send endpoint=&quot;soapClient&quot;&gt;
            &lt;message&gt;
                &lt;payload&gt;
                    &lt;SoapFaultForcingRequest
                      xmlns=&quot;http://www.consol.de/schemas/soap&quot;&gt;
                        &lt;Message&gt;This is invalid&lt;/Message&gt;
                    &lt;/SoapFaultForcingRequest&gt;
                &lt;/payload&gt;
            &lt;/message&gt;
        &lt;/send&gt;
    &lt;/ws:when&gt;
&lt;/ws:assert-fault&gt;</programlisting>

            <para>The expected SOAP fault detail content is simply added to the <emphasis>ws:assert</emphasis> action. The <literal>SoapFaultValidator</literal> implementation defined in the Spring application context
            is responsible for checking the SOAP fault detail with validation algorithm. The validator implementation checks the detail content to meet the expected template.
            Citrus provides some default <literal>SoapFaultValidator</literal> implementations. Supported algorithms are pure String comparison (<emphasis>com.consol.citrus.ws.validation.SimpleSoapFaultValidator</emphasis>)
            as well as XML tree walk-through (<emphasis>com.consol.citrus.ws.validation.XmlSoapFaultValidator</emphasis>).</para>

            <para>When using the XML validation algorithm you have the complete power as known from normal message validation in receive actions. This includes schema validation or ignoring elements
            for instance. On the fault-detail element you are able to add some validation settings such as <emphasis>schema-validation=enabled/disabled</emphasis>, custom <emphasis>schema-repository</emphasis>
            and so on.</para>

            <para><emphasis>XML DSL</emphasis></para>
            <programlisting>&lt;ws:assert-fault fault-code=&quot;{http://www.citrusframework.org/faults}TEC-1001&quot;
           fault-string=&quot;Invalid request&quot;&gt;
    &lt;ws:fault-detail schema-validation=&quot;false&quot;&gt;
      &lt;![CDATA[
          &lt;FaultDetail xmlns=&quot;http://www.consol.de/schemas/soap&quot;&gt;
              &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
              &lt;Text&gt;Invalid request&lt;/Text&gt;
          &lt;/FaultDetail&gt;
      ]]&gt;
    &lt;/ws:fault-detail&gt;
    &lt;ws:when&gt;
        &lt;send endpoint=&quot;soapClient&quot;&gt;
            [...]
        &lt;/send&gt;
    &lt;/ws:when&gt;
&lt;/ws:assert-fault&gt;</programlisting>

            <para>Please see also the Citrus API documentation for available validator implementations and validation algorithms.</para>

            <para>So far we have used assert action wrapper in order to catch SOAP fault exceptions and validate the SOAP fault content. Now we have an alternative way
            of handling SOAP faults in Citrus. With exceptions the send action aborts and we do not have a receive action for the SOAP fault. This might be inadequate if
            we need to validate the SOAP message content (SOAPHeader and SOAPBody) coming with the SOAP fault. Therefore the web service message sender component offers
            several fault strategy options. In the following we discuss the propagation of SOAP fault as messages to the receive action as we would do with
            normal SOAP messages.</para>

            <programlisting>&lt;citrus-ws:client id=&quot;soapClient&quot;
                               request-url=&quot;http://localhost:8090/test&quot;
                               fault-strategy=&quot;propagateError&quot;/&gt;</programlisting>

            <para>We have configured a fault strategy <emphasis>propagateError</emphasis> so the message sender will not raise client exceptions but inform the receive action
            with SOAP fault message contents. By default the fault strategy raises client exceptions (fault-strategy=<emphasis>throwsException</emphasis>).</para>

            <para>So now that we do not raise exceptions we can leave out the assert action wrapper in our test. Instead we simply use a receive action and validate the SOAP fault
            like this.</para>

            <programlisting>&lt;send endpoint=&quot;soapClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;SoapFaultForcingRequest xmlns=&quot;http://www.consol.de/schemas/sample.xsd&quot;&gt;
                &lt;Message&gt;This is invalid&lt;/Message&gt;
            &lt;/SoapFaultForcingRequest&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/send&gt;

&lt;receive endpoint=&quot;soapClient&quot; timeout=&quot;5000&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;SOAP-ENV:Fault xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
                &lt;faultcode xmlns:CITRUS=&quot;http://citrus.org/soap&quot;&gt;CITRUS:${soapFaultCode}&lt;/faultcode&gt;
                &lt;faultstring xml:lang=&quot;en&quot;&gt;${soapFaultString}&lt;/faultstring&gt;
            &lt;/SOAP-ENV:Fault&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>

            <para>So choose the preferred way of handling SOAP faults either by asserting client exceptions or propagating fault messages to the receive action on a SOAP client.</para>
        </section>

        <section id="soap-fault-details">
            <title>Multiple SOAP fault details</title>

            <para>SOAP fault messages can hold multiple SOAP fault detail elements. In the previous sections we have used SOAP fault details in sending and receiving actions as single element. In order
            to meet the SOAP specification Citrus is also able to handle multiple SOAP fault detail elements in a message. You just use multiple fault-detail elements in your test action like this:</para>

            <programlisting>&lt;ws:send-fault endpoint=&quot;helloSoapServer&quot;&gt;
    &lt;ws:fault&gt;
        &lt;ws:fault-code&gt;{http://www.citrusframework.org/faults}citrus:TEC-1000&lt;/ws:fault-code&gt;
        &lt;ws:fault-string&gt;Invalid request&lt;/ws:fault-string&gt;
        &lt;ws:fault-actor&gt;SERVER&lt;/ws:fault-actor&gt;
        &lt;ws:fault-detail&gt;
            &lt;![CDATA[
                &lt;FaultDetail xmlns=&quot;http://www.consol.de/schemas/sayHello.xsd&quot;&gt;
                    &lt;MessageId&gt;${messageId}&lt;/MessageId&gt;
                    &lt;CorrelationId&gt;${correlationId}&lt;/CorrelationId&gt;
                    &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
                    &lt;Text&gt;Invalid request&lt;/Text&gt;
                &lt;/FaultDetail&gt;
            ]]&gt;
        &lt;/ws:fault-detail&gt;
        &lt;ws:fault-detail&gt;
            &lt;![CDATA[
                &lt;ErrorDetail xmlns=&quot;http://www.consol.de/schemas/sayHello.xsd&quot;&gt;
                    &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
                &lt;/ErrorDetail&gt;
            ]]&gt;
        &lt;/ws:fault-detail&gt;
    &lt;/ws:fault&gt;
    &lt;ws:header&gt;
        &lt;ws:element name=&quot;citrus_soap_action&quot; value=&quot;sayHello&quot;/&gt;
    &lt;/ws:header&gt;
&lt;/ws:send-fault&gt;</programlisting>

            <para>This will result in following SOAP envelope message:</para>

            <programlisting>HTTP/1.1 500 Internal Server Error
Accept: text/xml, text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
SOAPAction: &quot;sayHello&quot;
Content-Type: text/xml; charset=utf-8
Content-Length: 680
Server: Jetty(7.0.0.pre5)

&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
    &lt;SOAP-ENV:Header/&gt;
    &lt;SOAP-ENV:Body&gt;
        &lt;SOAP-ENV:Fault&gt;
            &lt;faultcode xmlns:citrus=&quot;http://www.citrusframework.org/faults&quot;&gt;citrus:TEC-1000&lt;/faultcode&gt;
            &lt;faultstring xml:lang=&quot;en&quot;&gt;Invalid request&lt;/faultstring&gt;
            &lt;detail&gt;
                &lt;FaultDetail xmlns=&quot;http://www.consol.de/schemas/sayHello.xsd&quot;&gt;
                    &lt;MessageId&gt;9277832563&lt;/MessageId&gt;
                    &lt;CorrelationId&gt;4346806225&lt;/CorrelationId&gt;
                    &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
                    &lt;Text&gt;Invalid request&lt;/Text&gt;
                &lt;/FaultDetail&gt;
                &lt;ErrorDetail xmlns=&quot;http://www.consol.de/schemas/sayHello.xsd&quot;&gt;
                    &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
                &lt;/ErrorDetail&gt;
            &lt;/detail&gt;
        &lt;/SOAP-ENV:Fault&gt;
    &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</programlisting>

            <para>Of course we can also expect several fault detail elements when receiving a SOAP fault.</para>

            <para><emphasis>XML DSL</emphasis></para>
            <programlisting>&lt;ws:assert-fault fault-code=&quot;{http://www.citrusframework.org/faults}TEC-1001&quot;
           fault-string=&quot;Invalid request&quot;&gt;
    &lt;ws:fault-detail schema-validation=&quot;false&quot;&gt;
      &lt;![CDATA[
          &lt;FaultDetail xmlns=&quot;http://www.consol.de/schemas/soap&quot;&gt;
              &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
              &lt;Text&gt;Invalid request&lt;/Text&gt;
          &lt;/FaultDetail&gt;
      ]]&gt;
    &lt;/ws:fault-detail&gt;
    &lt;ws:fault-detail&gt;
      &lt;![CDATA[
          &lt;ErrorDetail xmlns=&quot;http://www.consol.de/schemas/soap&quot;&gt;
              &lt;ErrorCode&gt;TEC-1000&lt;/ErrorCode&gt;
          &lt;/ErrorDetail&gt;
      ]]&gt;
    &lt;/ws:fault-detail&gt;
    &lt;ws:when&gt;
        &lt;send endpoint=&quot;soapClient&quot;&gt;
            [...]
        &lt;/send&gt;
    &lt;/ws:when&gt;
&lt;/ws:assert-fault&gt;</programlisting>

            <para>As you can see we can individually use validation settings for each fault detail. In the example above we disabled schema validation for the first fault detail element.</para>
        </section>
    </section>

    <section id="soap-http-errors">
        <title>Send HTTP error codes with SOAP</title>

        <para>The SOAP server logic in Citrus is able to simulate pure HTTP error codes such as 404 &quot;Not found&quot; or 500 &quot;Internal server error&quot;. The good thing is that the Citrus server is
        able to receive a request for proper validation in a receive action and then simulate HTTP errors on demand.</para>

        <para>The mechanism on HTTP error code simulation is not different to the usual SOAP request/response handling in Citrus. We receive the request as usual and we provide a response. The HTTP error
        situation is simulated according to the special HTTP header <emphasis>citrus_http_status</emphasis> in the Citrus SOAP response definition. In case this header
        is set to a value other than 200 OK the Citrus SOAP server sends an empty SOAP response with HTTP error status code set accordingly.</para>

        <programlisting>&lt;receive endpoint="helloSoapServer"&gt;
  &lt;message&gt;
      &lt;payload&gt;
          &lt;Message xmlns=&quot;http://consol.de/schemas/sample.xsd&quot;&gt;
              &lt;Text&gt;Hello SOAP server&lt;/Text&gt;
          &lt;/Message&gt;
      &lt;/payload&gt;
  &lt;/message&gt;
&lt;/receive>

&lt;send endpoint="helloSoapServer"&gt;
    &lt;message&gt;
        &lt;data&gt;&lt;/data&gt;
    &lt;/message&gt;
    &lt;header&gt;
        &lt;element name="citrus_http_status_code" value="500"/&gt;
    &lt;/header&gt;
&lt;/send&gt;</programlisting>

        <para>The SOAP response must be empty and the HTTP status code is set to a value other than 200, like 500. This results in a HTTP error sent to the calling client with error 500 &quot;Internal server error&quot;.</para>
    </section>

    <section id="soap-attachments">
        <title>SOAP attachment support</title>

        <para>Citrus is able to add attachments to a SOAP request on client and server side. As usual you can validate the SOAP attachment content on a received SOAP message.
        The next chapters describe how to handle SOAP attachments in Citrus.</para>

        <section id="soap-attachment-send">
            <title>Send SOAP attachments</title>

            <para>As client Citrus is able to add attachments to the SOAP message. I think it is best to go straight into an example in order to understand how it works.</para>

            <programlisting>&lt;ws:send endpoint=&quot;soapClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;SoapMessageWithAttachment xmlns=&quot;http://consol.de/schemas/sample.xsd&quot;&gt;
                &lt;Operation&gt;Read the attachment&lt;/Operation&gt;
            &lt;/SoapMessageWithAttachment&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
    &lt;ws:attachment content-id=&quot;MySoapAttachment&quot; content-type=&quot;text/plain&quot;&gt;
        &lt;ws:resource file=&quot;classpath:com/consol/citrus/ws/soapAttachment.txt&quot;/&gt;
    &lt;/ws:attachment&gt;
&lt;/ws:send&gt;</programlisting>

            <note>
                <para>In the previous chapters you may have already noticed the <emphasis>citrus-ws</emphasis> namespace that stands for the SOAP extensions in Citrus. Please
                include the <emphasis>citrus-ws</emphasis> namespace in your test case as described earlier in this chapter so you can use the attachment support.</para>
            </note>

            <para>The special send action of the SOAP extension namespace is aware of SOAP attachments. The attachment content usually consists of a <emphasis>content-id</emphasis>
            a <emphasis>content-type</emphasis> and the actual content as plain text or binary content. Inside the test case you can use external file resources or inline CDATA sections
            for the attachment content. As you are familiar with Citrus you may know this already from other actions.</para>

            <para>Citrus will construct a SOAP message with the SOAP attachment. Currently only one attachment per message is supported.</para>
        </section>

        <section id="soap-attachment-receiver">
            <title>Receive SOAP attachments</title>

            <para>When Citrus calls SOAP WebServices as a client we may receive SOAP responses with attachments. The tester can validate those
            received SOAP messages with attachment content quite easy. As usual let us have a look at an example first.</para>

            <programlisting>&lt;ws:receive endpoint=&quot;soapClient&quot;&gt;
    &lt;message&gt;
        &lt;payload&gt;
            &lt;SoapMessageWithAttachmentRequest xmlns=&quot;http://consol.de/schemas/sample.xsd&quot;&gt;
                &lt;Operation&gt;Read the attachment&lt;/Operation&gt;
            &lt;/SoapMessageWithAttachmentRequest&gt;
        &lt;/payload&gt;
    &lt;/message&gt;
    &lt;ws:attachment content-id=&quot;MySoapAttachment&quot;
                      content-type=&quot;text/plain&quot;
                      validator=&quot;mySoapAttachmentValidator&quot;&gt;
        &lt;ws:resource file=&quot;classpath:com/consol/citrus/ws/soapAttachment.txt&quot;/&gt;
    &lt;/ws:attachment&gt;
&lt;/ws:receive&gt;</programlisting>

            <para>Again we use the Citrus SOAP extension namespace with the specific receive action that is aware of SOAP attachment validation. The tester can validate
            the <emphasis>content-id</emphasis>, the <emphasis>content-type</emphasis> and the attachment content. Instead of using the external file resource you could also define an expected attachment template directly
            in the test case as inline CDATA section.</para>

            <note>
                <para>The <emphasis>ws:attachment</emphasis> element specifies a validator instance. This validator determines how to validate the attachment content. SOAP attachments are not
                limited to XML content. Plain text content and binary content is possible, too. So each SOAP attachment validating action can use a different <literal>SoapAttachmentValidator</literal>
                instance which is responsible for validating and comparing received attachments to expected template attachments. In the Citrus configuration the validator
                is set as normal Spring bean with the respective identifier.</para>

                <programlisting>&lt;bean id=&quot;soapAttachmentValidator&quot; class=&quot;com.consol.citrus.ws.validation.SimpleSoapAttachmentValidator&quot;/&gt;
&lt;bean id=&quot;mySoapAttachmentValidator&quot; class=&quot;com.company.ws.validation.MySoapAttachmentValidator&quot;/&gt;</programlisting>

                <para>You can define several validator instances in the Citrus configuration. The validator with the general id <emphasis>"soapAttachmentValidator"</emphasis> is the default validator
                for all actions that do not explicitly set a validator instance. Citrus offers a set of reference validator implementations. The <literal>SimpleSoapAttachmentValidator</literal> will use a simple
                plain text comparison. Of course you are able to add individual validator implementations, too.</para>
            </note>
        </section>

        <section id="soap-attachment-mtom">
          <title>SOAP MTOM support</title>

          <para>MTOM (Message Transmission Optimization Mechanism) enables you to send and receive large SOAP message content using streamed data handlers. This optimizes the resource allocation on server and client side where
            not all data is loaded into memory when marshalling/unmarshalling the message payload data. In detail MTOM enabled messages do have a XOP package inside the message payload replacing the actual large content data. The
            content is then streamed aas separate attachment. Server and client can operate with a data handler providing access to the streamed content. This is very helpful when using large binary content inside a SOAP message for instance.</para>

          <para>Citrus is able to both send and receive MTOM enabled SOAP messages on client and server. Just use the <emphasis>mtom-enabled</emphasis> flag when sending a SOAP message:</para>

          <programlisting>&lt;ws:send endpoint=&quot;soapMtomClient&quot; mtom-enabled=&quot;true&quot;&gt;
  &lt;message&gt;
    &lt;data&gt;
      &lt;![CDATA[
        &lt;image:addImage xmlns:image=&quot;http://www.citrusframework.org/imageService/&quot;&gt;
          &lt;image&gt;cid:IMAGE&lt;/image&gt;
        &lt;/image:addImage&gt;
      ]]&gt;
    &lt;/data&gt;
  &lt;/message&gt;
  &lt;ws:attachment content-id=&quot;IMAGE&quot; content-type=&quot;application/octet-stream&quot;&gt;
    &lt;ws:resource file=&quot;classpath:com/consol/citrus/hugeImageData.png&quot;/&gt;
  &lt;/ws:attachment&gt;
&lt;/ws:send&gt;</programlisting>

          <para>As you can see the example above sends a SOAP message that contains a large binary image content. The actual binary image data is referenced with a content id marker <emphasis>cid:IMAGE</emphasis> inside the message payload. The actual image
          content is added as attachment with a separate file resource. Important is here the <emphasis>content-id</emphasis> which matches the id marker in the SOAP message payload (<emphasis>IMAGE</emphasis>).</para>

          <para>Citrus builds a proper SOAP MTOM enabled message automatically adding the XOP package inside the message. The binary data is sent as separate SOAP attachment accordingly. The resulting SOAP message looks like this:</para>

          <programlisting>&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
&lt;SOAP-ENV:Header&gt;&lt;/SOAP-ENV:Header&gt;
  &lt;SOAP-ENV:Body&gt;
    &lt;image:addImage xmlns:image=&quot;http://www.citrusframework.org/imageService/&quot;&gt;
      &lt;image&gt;&lt;xop:Include xmlns:xop=&quot;http://www.w3.org/2004/08/xop/include&quot; href=&quot;cid:IMAGE&quot;/&gt;&lt;/image&gt;
    &lt;/image:addImage&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</programlisting>

          <para>On the server side Citrus is also able to handle MTOM enabled SOAP messages. In a server receive action you can specify the MTOM SOAP attachment content as follows.</para>

          <programlisting>&lt;ws:receive endpoint=&quot;soapMtomServer&quot; mtom-enabled=&quot;true&quot;&gt;
  &lt;message schema-validation=&quot;false&quot;&gt;
    &lt;data&gt;
      &lt;![CDATA[
        &lt;image:addImage xmlns:image=&quot;http://www.citrusframework.org/imageService/&quot;&gt;
          &lt;image&gt;&lt;xop:Include xmlns:xop=&quot;http://www.w3.org/2004/08/xop/include&quot; href=&quot;cid:IMAGE&quot;/&gt;&lt;/image&gt;
        &lt;/image:addImage&gt;
      ]]&gt;
    &lt;/data&gt;
  &lt;/message&gt;
  &lt;ws:attachment content-id=&quot;IMAGE&quot; content-type=&quot;application/octet-stream&quot;&gt;
    &lt;ws:resource file=&quot;classpath:com/consol/citrus/hugeImageData.png&quot;/&gt;
  &lt;/ws:attachment&gt;
&lt;/ws:receive&gt;</programlisting>

          <para>We define the MTOM attachment content as separate SOAP attachment. The <emphasis>content-id</emphasis> is referenced somewhere in the SOAP message payload data. At runtime
          Citrus will add the XOP package definition automatically and perform validation on the message and its streamed MTOM attachment data.</para>

          <para>Next thing that we have to talk about is inline MTOM data. This means that the content should be added as either <emphasis>base64Binary</emphasis> or <emphasis>hexBinary</emphasis> encoded
          String data directly to the message content. See the following example that uses the <emphasis>mtom-inline</emphasis> setting:</para>

          <programlisting>&lt;ws:send endpoint=&quot;soapMtomClient&quot; mtom-enabled=&quot;true&quot;&gt;
  &lt;message&gt;
    &lt;data&gt;
      &lt;![CDATA[
        &lt;image:addImage xmlns:image=&quot;http://www.citrusframework.org/imageService/&quot;&gt;
          &lt;image&gt;cid:IMAGE&lt;/image&gt;
          &lt;icon&gt;cid:ICON&lt;/icon&gt;
        &lt;/image:addImage&gt;
      ]]&gt;
    &lt;/data&gt;
  &lt;/message&gt;
  &lt;ws:attachment content-id=&quot;IMAGE&quot; content-type=&quot;application/octet-stream&quot;
            mtom-inline=&quot;true&quot; encoding-type=&quot;base64Binary&quot;&gt;
    &lt;ws:resource file=&quot;classpath:com/consol/citrus/image.png&quot;/&gt;
  &lt;/ws:attachment&gt;
  &lt;ws:attachment content-id=&quot;ICON&quot; content-type=&quot;application/octet-stream&quot;
            mtom-inline=&quot;true&quot; encoding-type=&quot;hexBinary&quot;&gt;
    &lt;ws:resource file=&quot;classpath:com/consol/citrus/icon.ico&quot;/&gt;
  &lt;/ws:attachment&gt;
&lt;/ws:send&gt;</programlisting>

          <para>The listing above defines two inline MTOM attachments. The first attachment <emphasis>cid:IMAGE</emphasis> uses the encoding type <emphasis>base64Binary</emphasis> which is the default.
            The second attachment <emphasis>cid:ICON</emphasis> uses <emphasis>hexBinary</emphasis> encoding. Both attachments are added as inline data before the message is sent. The final SOAP message looks like follows:</para>

          <programlisting>&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
&lt;SOAP-ENV:Header&gt;&lt;/SOAP-ENV:Header&gt;
  &lt;SOAP-ENV:Body&gt;
    &lt;image:addImage xmlns:image=&quot;http://www.citrusframework.org/imageService/&quot;&gt;
      &lt;image&gt;VGhpcyBpcyBhIGJpbmFyeSBpbWFnZSBhdHRhY2htZW50IQpWYXJpYWJsZXMgJXt0ZXN0fSBzaG91bGQgbm90IGJlIHJlcGxhY2VkIQ==&lt;/image&gt;
      &lt;icon&gt;5468697320697320612062696E6172792069636F6E206174746163686D656E74210A5661726961626C657320257B746573747D2073686F756C64206E6F74206265207265706C6163656421&lt;/icon&gt;
    &lt;/image:addImage&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</programlisting>

          <para>The image content is a base64Binary String and the icon a heyBinary String. Of course this mechanism also is supported in receive actions on the server side where the expected message content is added als inline MTOM data
          before validation takes place.</para>
        </section>
    </section>

    <section id="soap-basic-auth-client">
        <title>SOAP client basic authentication</title>

        <para>As a SOAP client you may have to use basic authentication in order to access a server resource. Basic authentication via HTTP stands for username/password authentication
        where the credentials are transmitted in the HTTP request header section as base64 encoded entry. As Citrus uses the Spring WebService stack we can use the basic authentication
        support there. We set the user credentials on the HttpClient message sender which is used inside the Spring <literal>WebServiceTemplate</literal>.</para>

        <para>Citrus provides a comfortable way to set the HTTP message sender with basic authentication credentials on the <literal>WebServiceTemplate</literal>. Just see the following
        example and learn how to do that.</para>

        <programlisting>&lt;citrus-ws:client id=&quot;soapClient&quot;
                              request-url=&quot;http://localhost:8090/test&quot;
                              message-sender=&quot;basicAuthClient&quot;/&gt;

&lt;bean id=&quot;basicAuthClient&quot; class=&quot;org.springframework.ws.transport.http.HttpComponentsMessageSender&quot;&gt;
  &lt;property name=&quot;authScope&quot;&gt;
      &lt;bean class=&quot;org.apache.http.auth.AuthScope&quot;&gt;
        &lt;constructor-arg value=&quot;localhost&quot;/&gt;
        &lt;constructor-arg value=&quot;8090&quot;/&gt;
        &lt;constructor-arg value=&quot;&quot;/&gt;
        &lt;constructor-arg value=&quot;basic&quot;/&gt;
      &lt;/bean&gt;
  &lt;/property&gt;
  &lt;property name=&quot;credentials&quot;&gt;
    &lt;bean class=&quot;org.apache.http.auth.UsernamePasswordCredentials&quot;&gt;
        &lt;constructor-arg value=&quot;someUsername&quot;/&gt;
        &lt;constructor-arg value=&quot;somePassword&quot;/&gt;
    &lt;/bean&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>

        <para>The above configuration results in SOAP requests with authentication headers properly set for basic authentication. The special message sender takes care on adding the proper
        basic authentication header to each request that is sent with this Citrus message sender. By default preemtive authentication is used. The message sender only sends a single request to the server with
        all authentication information set in the message header. The request which determines the authentication scheme on the server is skipped. This is why you have to add some auth scope so Citrus
        can setup an authentication cache within the HTTP context in order to have preemtive authentication.</para>

        <tip><para>You can also skip the message sender configuration and set the <emphasis>Authorization</emphasis> header on each request in your send action definition on your own.
        Be aware of setting the header as HTTP mime header using the correct prefix and take care on using the correct basic authentication with base64 encoding for the <emphasis>username:password</emphasis> phrase.</para>

          <programlisting>&lt;header&gt;
    &lt;element name=&quot;citrus_http_Authorization&quot; value=&quot;Basic c29tZVVzZXJuYW1lOnNvbWVQYXNzd29yZA==&quot;/&gt;
&lt;/header&gt;</programlisting>

          <para>For base64 encoding you can also use a Citrus function, see <xref linkend="functions-encode-base64"/></para>
        </tip>
    </section>

    <section id="soap-basic-auth-server">
        <title>SOAP server basic authentication</title>

        <para>When providing SOAP WebService server functionality Citrus can also set basic authentication so all clients need to
        authenticate properly when accessing the server resource.</para>

        <programlisting>&lt;citrus-ws:server id=&quot;simpleSoapServer&quot;
             port=&quot;8080&quot;
             auto-start=&quot;true&quot;
             resource-base=&quot;src/it/resources&quot;
             security-handler=&quot;basicSecurityHandler&quot;/&gt;

&lt;bean id=&quot;securityHandler&quot; class=&quot;com.consol.citrus.ws.security.SecurityHandlerFactory&quot;&gt;
    &lt;property name=&quot;users&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;com.consol.citrus.ws.security.User&quot;&gt;
                &lt;property name=&quot;name&quot; value=&quot;citrus&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;secret&quot;/&gt;
                &lt;property name=&quot;roles&quot; value=&quot;CitrusRole&quot;/&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name=&quot;constraints&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;/foo/*&quot;&gt;
                &lt;bean class=&quot;com.consol.citrus.ws.security.BasicAuthConstraint&quot;&gt;
                    &lt;constructor-arg value=&quot;CitrusRole&quot;/&gt;
                &lt;/bean&gt;
            &lt;/entry&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>

        <para>We have set a security handler on the server web container with a constraint on all resources with <emphasis>/foo/*</emphasis>. Following from that
        the server requires basic authentication for these resources. The granted users and roles are specified within the security handler bean definition. Connecting clients
        have to set the basic auth HTTP header properly using the correct user and role for accessing the Citrus server now.</para>

        <para>You can customize the security handler for your very specific needs (e.g. load users and roles with JDBC from a database). Just have a look at the code base and
        inspect the settings and properties offered by the security handler interface.</para>

        <tip>
            <para>This mechanism is not restricted to basic authentication only. With other settings you can also set up digest or form-based authentication constraints very easy.</para>
        </tip>
    </section>

    <section id="soap-ws-adressing">
        <title>WS-Addressing support</title>

        <para>The web service stack offers a lot of different technologies and standards within the context of SOAP WebServices. We speak of WS-* specifications in particular. One of these specifications deals
        with addressing. On client side you may add wsa header information to the request in order to give the server instructions how to deal with SOAP faults for instance.</para>

        <para>In Citrus WebService client you can add those header information using the common configuration like this:</para>

        <programlisting>&lt;citrus-ws:client id=&quot;soapClient&quot;
                         request-url=&quot;http://localhost:8090/test&quot;
                         message-converter=&quot;wsAddressingMessageConverter&quot;/&gt;

&lt;bean id=&quot;wsAddressingMessageConverter&quot; class=&quot;com.consol.citrus.ws.message.converter.WsAddressingMessageConverter&quot;&gt;
  &lt;constructor-arg&gt;
    &lt;bean id=&quot;wsAddressing200408&quot; class=&quot;com.consol.citrus.ws.addressing.WsAddressingHeaders&quot;&gt;
        &lt;property name=&quot;version&quot; value=&quot;VERSION200408&quot;/&gt;
        &lt;property name=&quot;action&quot;
                     value=&quot;http://citrus.sample/sayHello&quot;/&gt;
        &lt;property name=&quot;to&quot;
                     value=&quot;http://citrus.sample/server&quot;/&gt;
        &lt;property name=&quot;from&quot;&gt;
            &lt;bean class=&quot;org.springframework.ws.soap.addressing.core.EndpointReference&quot;&gt;
                &lt;constructor-arg value=&quot;http://citrus.sample/client&quot;/&gt;
            &lt;/bean&gt;
        &lt;/property&gt;
        &lt;property name=&quot;replyTo&quot;&gt;
            &lt;bean class=&quot;org.springframework.ws.soap.addressing.core.EndpointReference&quot;&gt;
                &lt;constructor-arg value=&quot;http://citrus.sample/client&quot;/&gt;
            &lt;/bean&gt;
        &lt;/property&gt;
        &lt;property name=&quot;faultTo&quot;&gt;
            &lt;bean class=&quot;org.springframework.ws.soap.addressing.core.EndpointReference&quot;&gt;
                &lt;constructor-arg value=&quot;http://citrus.sample/fault/resolver&quot;/&gt;
            &lt;/bean&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
  &lt;/constructor-arg&gt;
&lt;/bean&gt;</programlisting>

        <note>
            <para>The WS-Addressing specification knows several versions. Supported version are <emphasis>VERSION10 (WS-Addressing 1.0 May 2006)</emphasis> and <emphasis>VERSION200408
            (August 2004 edition of the WS-Addressing specification)</emphasis>.</para>
        </note>

        <para>The addressing headers find a place in the SOAP message header with respective namespaces and values. A possible SOAP request with WS addressing headers looks like follows:</para>

        <programlisting>&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
    &lt;SOAP-ENV:Header xmlns:wsa=&quot;http://schemas.xmlsoap.org/ws/2004/08/addressing&quot;&gt;
        &lt;wsa:To SOAP-ENV:mustUnderstand=&quot;1&quot;&gt;http://citrus.sample/server&lt;/wsa:To&gt;
        &lt;wsa:From&gt;
            &lt;wsa:Address&gt;http://citrus.sample/client&lt;/wsa:Address&gt;
        &lt;/wsa:From&gt;
        &lt;wsa:ReplyTo&gt;
            &lt;wsa:Address&gt;http://citrus.sample/client&lt;/wsa:Address&gt;
        &lt;/wsa:ReplyTo&gt;
        &lt;wsa:FaultTo&gt;
            &lt;wsa:Address&gt;http://citrus.sample/fault/resolver&lt;/wsa:Address&gt;
        &lt;/wsa:FaultTo&gt;
        &lt;wsa:Action&gt;http://citrus.sample/sayHello&lt;/wsa:Action&gt;
        &lt;wsa:MessageID&gt;urn:uuid:4c4d8af2-b402-4bc0-a2e3-ad33b910e394&lt;/wsa:MessageID&gt;
    &lt;/SOAP-ENV:Header&gt;
    &lt;SOAP-ENV:Body&gt;
        &lt;cit:HelloRequest xmlns:cit=&quot;http://citrus/sample/sayHello&quot;&gt;
            &lt;cit:Text&gt;Hello Citrus!&lt;/cit:Text&gt;
        &lt;/cit:HelloRequest&gt;
    &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;</programlisting>

        <important>
            <para>The message id property is automatically generated for each request. If you need to set a static message
            id you can do so in Spring application context message sender configuration.</para>
        </important>
    </section>

    <section id="soap-fork-mode">
        <title>SOAP client fork mode</title>

        <para>SOAP over HTTP uses synchronous communication by nature. This means that sending a SOAP message in Citrus over HTTP will automatically
        block further test actions until the synchronous HTTP response has been received. In test cases this synchronous blocking might cause problems
        for several reasons. A simple reason would be that you need to do further test actions in parallel to the synchronous HTTP SOAP communication (e.g. simulate another
        backend system in the test case).</para>

        <para>You can separate the SOAP send action from the rest of the test case by using the <emphasis>&quot;fork&quot;</emphasis> mode. The SOAP
        client will automatically open a new Java Thread for the synchronous communication and the test is able to continue with execution although the
        synchronous HTTP SOAP response has not arrived yet.</para>

        <programlisting>&lt;ws:send endpoint=&quot;soapClient&quot; fork=&quot;true&quot;&gt;
  &lt;message&gt;
    &lt;payload&gt;
        &lt;SoapRequest xmlns=&quot;http://www.consol.de/schemas/sample.xsd&quot;&gt;
          &lt;Operation&gt;Read the attachment&lt;/Operation&gt;
        &lt;/SoapRequest&gt;
    &lt;/payload&gt;
  &lt;/message&gt;
&lt;/ws:send&gt;</programlisting>

        <para>With the <emphasis>&quot;fork&quot;</emphasis> mode enabled the test continues with execution while the sending action waits for the synchronous response in
        a separate Java Thread. You could reach the same behaviour with a complex &lt;parallel&gt;/&lt;sequential&gt; container construct, but forking the send action is much more
        straight forward.</para>

        <important>It is highly recommended to use a proper <emphasis>&quot;timeout&quot;</emphasis> setting on the SOAP receive action when using fork mode. The forked send operation might take
        some time and the corresponding receive action might run into failure as the response was has not been received yet. The result would be a broken test because of the missing response message.
        A proper <emphasis>&quot;timeout&quot;</emphasis> setting for the receive action solves this problem as the action waits for this time period and occasionally repeatedly asks for the SOAP response message.
        The following listing sets the receive timeout to 10 seconds, so the action waits for the forked send action to deliver the SOAP response in time.
            <programlisting>
&lt;ws:receive endpoint=&quot;soapClient&quot; timeout=&quot;10000&quot;&gt;
  &lt;message&gt;
    &lt;payload&gt;
        &lt;SoapResponse xmlns=&quot;http://www.consol.de/schemas/sample.xsd&quot;&gt;
          &lt;Operation&gt;Did something&lt;/Operation&gt;
          &lt;Success&gt;true&lt;/Success&gt;
        &lt;/SoapResponse&gt;
    &lt;/payload&gt;
  &lt;/message&gt;
&lt;/ws:receive&gt;
            </programlisting>
        </important>
    </section>

    <section id="soap-servlet-context">
        <title>SOAP servlet context customization</title>
        <para>For highly customized SOAP server components in Citrus you can define a full servlet context configuration file. Here you have the full power to add Spring endpoint mappings and custom endpoint implementations.
        You can set the custom servlet context as external file resource on the server component:</para>

        <programlisting>&lt;citrus-ws:client id=&quot;soapClient&quot;
          context-config-location=&quot;classpath:citrus-ws-servlet.xml&quot;
          message-factory=&quot;soap11MessageFactory&quot;/&gt;</programlisting>

        <para>Now let us have a closer look at the context-config-location attribute. This configuration defines the Spring application context file for endpoints, request mappings and other SpringWS specific information. Please see the
        official SpringWS documentation for details on this Spring based configuration. You can also just copy the following example application context which should work for you in general.</para>

        <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

  &lt;bean id=&quot;loggingInterceptor&quot;
    class=&quot;org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor&quot;&gt;
      &lt;description&gt;
          This interceptor logs the message payload.
      &lt;/description&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;helloServicePayloadMapping&quot;
    class=&quot;org.springframework.ws.server.endpoint.mapping.PayloadRootQNameEndpointMapping&quot;&gt;
      &lt;property name=&quot;mappings&quot;&gt;
          &lt;props&gt;
              &lt;prop
                  key=&quot;{http://www.consol.de/schemas/sayHello}HelloRequest&quot;&gt;
                  helloServiceEndpoint
              &lt;/prop&gt;
          &lt;/props&gt;
      &lt;/property&gt;
      &lt;property name=&quot;interceptors&quot;&gt;
          &lt;list&gt;
              &lt;ref bean=&quot;loggingInterceptor&quot;/&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;helloServiceEndpoint&quot; class=&quot;com.consol.citrus.ws.server.WebServiceEndpoint&quot;&gt;
      &lt;property name=&quot;endpointAdapter&quot; ref=&quot;staticResponseEndpointAdapter&quot;/&gt;
  &lt;/bean&gt;

  &lt;citrus:static-response-adapter id=&quot;staticResponseEndpointAdapter&quot;&gt;
      &lt;citrus:payload&gt;
          &lt;![CDATA[
              &lt;HelloResponse xmlns=&quot;http://www.consol.de/schemas/sayHello&quot;&gt;
                  &lt;MessageId&gt;123456789&lt;/MessageId&gt;
                  &lt;CorrelationId&gt;CORR123456789&lt;/CorrelationId&gt;
                  &lt;User&gt;WebServer&lt;/User&gt;
                  &lt;Text&gt;Hello User&lt;/Text&gt;
              &lt;/HelloResponse&gt;
          ]]&gt;
      &lt;/citrus:payload&gt;
      &lt;citrus:header&gt;
          &lt;citrus:element name=&quot;{http://www.consol.de/schemas/samples/sayHello.xsd}ns0:Operation&quot;
                  value=&quot;sayHelloResponse&quot;/&gt;
          &lt;citrus:element name=&quot;{http://www.consol.de/schemas/samples/sayHello.xsd}ns0:Request&quot;
                  value=&quot;HelloRequest&quot;/&gt;
          &lt;citrus:element name=&quot;citrus_soap_action&quot;
                  value=&quot;sayHello&quot;/&gt;
      &lt;/citrus:header&gt;
  &lt;/citrus:static-response-adapter&gt;
&lt;/beans&gt;</programlisting>

        <para>The program listing above describes a normal SpringWS request mapping with endpoint configurations. The mapping is responsible to forward
        incoming requests to the endpoint which will handle the request and provide a proper response message. First of all we add a logging interceptor
        to the context so all incoming requests get logged to the console first. Then we use a payload mapping (PayloadRootQNameEndpointMapping) in order
        to map all incoming <literal>'HelloRequest'</literal> SOAP messages to the <literal>'helloServiceEndpoint'</literal>. Endpoints are of
        essential nature in Citrus SOAP WebServices implementation. They are responsible for processing a request in order to provide a proper response
        message that is sent back to the calling client. Citrus uses the endpoint in combination with a message endpoint adapter implementation.</para>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" display="block" fileref="figure_009.jpg" format="JPG" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center" display="block" fileref="figure_009.jpg" format="JPG" />
          </imageobject>
        </mediaobject>

        <para>The endpoint works together with the message endpoint adapter that is responsible for providing a response message for the client. The various
        message endpoint adapter implementations in Citrus were already discussed in <xref linkend="endpoint-adapter"/>.</para>

        <para>In this example the <literal>'helloServiceEndpoint'</literal> uses the <literal>'static-response-adapter'</literal>
        which is always returning a static response message. In most cases static responses will not fit the test scenario and you will have to
        respond more dynamically.</para>

        <para>Regardless of which message endpoint adapter setup you are using in your test case the endpoint transforms the response into a proper SOAP
        message. You can add as many request mappings and endpoints as you want to the server context configuration. So you are able to handle
        different request types with one single Jetty server instance.</para>

        <para>That's it for connecting with SOAP WebServices! We saw how to send and receive SOAP messages with Jetty and
        Spring WebServices. Have a look at the samples coming with your Citrus archive in order to learn more about the SOAP message handling.</para>
    </section>
</chapter>
